{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-4\"\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 0,\n  class: \"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50\"\n};\nconst _hoisted_4 = {\n  class: \"bg-white p-6 rounded max-w-lg w-full relative\"\n};\nconst _hoisted_5 = {\n  class: \"text-xl font-bold mb-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Search box \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.search = $event),\n    type: \"text\",\n    placeholder: \"Search quotes...\",\n    class: \"mb-4 p-2 border rounded w-full\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.search]]), _createCommentVNode(\" List of quotes \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredQuotes, quote => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: quote.id,\n      class: \"mb-2\"\n    }, [_createElementVNode(\"button\", {\n      onClick: $event => $setup.openModal(quote),\n      class: \"text-blue-500 underline\"\n    }, _toDisplayString(quote.name), 9 /* TEXT, PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Modal \"), $setup.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: $setup.closeModal,\n    class: \"absolute top-2 left-2 text-gray-500 text-xl\"\n  }, \" ← \"), _createElementVNode(\"h2\", _hoisted_5, _toDisplayString($setup.selectedQuote.name), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.selectedQuote.meaning), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_cache","$event","$setup","search","type","placeholder","_Fragment","_renderList","filteredQuotes","quote","id","onClick","openModal","name","_hoisted_2","showModal","_hoisted_3","_hoisted_4","closeModal","_hoisted_5","_toDisplayString","selectedQuote","meaning"],"sources":["C:\\Users\\ruzhe\\mobile-apps-games-container\\Quotify\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"p-4\">\n    <!-- Search box -->\n    <input\n      v-model=\"search\"\n      type=\"text\"\n      placeholder=\"Search quotes...\"\n      class=\"mb-4 p-2 border rounded w-full\"\n    />\n\n    <!-- List of quotes -->\n    <div v-for=\"quote in filteredQuotes\" :key=\"quote.id\" class=\"mb-2\">\n      <button @click=\"openModal(quote)\" class=\"text-blue-500 underline\">\n        {{ quote.name }}\n      </button>\n    </div>\n\n    <!-- Modal -->\n    <div\n      v-if=\"showModal\"\n      class=\"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50\"\n    >\n      <div class=\"bg-white p-6 rounded max-w-lg w-full relative\">\n        <button\n          @click=\"closeModal\"\n          class=\"absolute top-2 left-2 text-gray-500 text-xl\"\n        >\n          ←\n        </button>\n        <h2 class=\"text-xl font-bold mb-4\">{{ selectedQuote.name }}</h2>\n        <p>{{ selectedQuote.meaning }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue'\n\nconst quotes = ref([\n  { id: 1, name: 'Carpe Diem', meaning: 'Seize the day' },\n  { id: 2, name: 'Memento Mori', meaning: 'Remember you will die' },\n  { id: 3, name: 'Amor Fati', meaning: 'Love your fate' },\n])\n\nconst search = ref('')\nconst showModal = ref(false)\nconst selectedQuote = ref({})\n\nconst filteredQuotes = computed(() => {\n  return quotes.value.filter(q =>\n    q.name.toLowerCase().includes(search.value.toLowerCase())\n  )\n})\n\nconst openModal = (quote) => {\n  selectedQuote.value = quote\n  showModal.value = true\n}\n\nconst closeModal = () => {\n  showModal.value = false\n}\n</script>\n\n<style>\n/* Optional: if you're not using Tailwind, add this basic styling */\nbody {\n  margin: 0;\n  font-family: sans-serif;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAK;mBADlB;;EAAAC,GAAA;EAoBMD,KAAK,EAAC;;;EAEDA,KAAK,EAAC;AAA+C;;EAOpDA,KAAK,EAAC;AAAwB;;uBA5BxCE,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJC,mBAAA,gBAAmB,E,gBACnBC,mBAAA,CAKE;IARN,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIeC,MAAA,CAAAC,MAAM,GAAAF,MAAA;IACfG,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,kBAAkB;IAC9BX,KAAK,EAAC;iDAHGQ,MAAA,CAAAC,MAAM,E,GAMjBL,mBAAA,oBAAuB,G,kBACvBF,mBAAA,CAIMU,SAAA,QAfVC,WAAA,CAWyBL,MAAA,CAAAM,cAAc,EAAvBC,KAAK;yBAAjBb,mBAAA,CAIM;MAJgCD,GAAG,EAAEc,KAAK,CAACC,EAAE;MAAEhB,KAAK,EAAC;QACzDK,mBAAA,CAES;MAFAY,OAAK,EAAAV,MAAA,IAAEC,MAAA,CAAAU,SAAS,CAACH,KAAK;MAAGf,KAAK,EAAC;wBACnCe,KAAK,CAACI,IAAI,wBAbrBC,UAAA,E;kCAiBIhB,mBAAA,WAAc,EAENI,MAAA,CAAAa,SAAS,I,cADjBnB,mBAAA,CAcM,OAdNoB,UAcM,GAVJjB,mBAAA,CASM,OATNkB,UASM,GARJlB,mBAAA,CAKS;IAJNY,OAAK,EAAET,MAAA,CAAAgB,UAAU;IAClBxB,KAAK,EAAC;KACP,KAED,GACAK,mBAAA,CAAgE,MAAhEoB,UAAgE,EAAAC,gBAAA,CAA1BlB,MAAA,CAAAmB,aAAa,CAACR,IAAI,kBACxDd,mBAAA,CAAkC,WAAAqB,gBAAA,CAA5BlB,MAAA,CAAAmB,aAAa,CAACC,OAAO,iB,OA9BnCxB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}