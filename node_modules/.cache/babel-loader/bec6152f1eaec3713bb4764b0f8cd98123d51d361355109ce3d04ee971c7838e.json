{"ast":null,"code":"var _DefaultWorkerFactory;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from './trustedTypes.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nimport { Disposable, toDisposable } from '../common/lifecycle.js';\n// Reuse the trusted types policy defined from worker bootstrap\n// when available.\n// Refs https://github.com/microsoft/vscode/issues/222193\nlet ttPolicy;\nif (typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope' && globalThis.workerttPolicy !== undefined) {\n  ttPolicy = globalThis.workerttPolicy;\n} else {\n  ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', {\n    createScriptURL: value => value\n  });\n}\nfunction getWorker(label) {\n  const monacoEnvironment = globalThis.MonacoEnvironment;\n  if (monacoEnvironment) {\n    if (typeof monacoEnvironment.getWorker === 'function') {\n      return monacoEnvironment.getWorker('workerMain.js', label);\n    }\n    if (typeof monacoEnvironment.getWorkerUrl === 'function') {\n      const workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);\n      return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, {\n        name: label\n      });\n    }\n  }\n  // ESM-comment-begin\n  // \tif (typeof require === 'function') {\n  // \t\t// check if the JS lives on a different origin\n  // \t\tconst workerMain = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n  // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n  // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n  // \t}\n  // ESM-comment-end\n  throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\n// ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^((http:)|(https:)|(file:))/.test(scriptPath) && scriptPath.substring(0, globalThis.origin.length) !== globalThis.origin) {\n// \t\t// this is the cross-origin case\n// \t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t} else {\n// \t\tconst start = scriptPath.lastIndexOf('?');\n// \t\tconst end = scriptPath.lastIndexOf('#', start);\n// \t\tconst params = start > 0\n// \t\t\t? new URLSearchParams(scriptPath.substring(start + 1, ~end ? end : undefined))\n// \t\t\t: new URLSearchParams();\n// \n// \t\tCOI.addSearchParam(params, true, true);\n// \t\tconst search = params.toString();\n// \t\tif (!search) {\n// \t\t\tscriptPath = `${scriptPath}#${label}`;\n// \t\t} else {\n// \t\t\tscriptPath = `${scriptPath}?${params.toString()}#${label}`;\n// \t\t}\n// \t}\n// \n// \tconst factoryModuleId = 'vs/base/worker/defaultWorkerFactory.js';\n// \tconst workerBaseUrl = require.toUrl(factoryModuleId).slice(0, -factoryModuleId.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \tconst blob = new Blob([[\n// \t\t`/*${label}*/`,\n// \t\t`globalThis.MonacoEnvironment = { baseUrl: '${workerBaseUrl}' };`,\n// \t\t// VSCODE_GLOBALS: NLS\n// \t\t`globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(getNLSMessages())};`,\n// \t\t`globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(getNLSLanguage())};`,\n// \t\t`const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });`,\n// \t\t`globalThis.workerttPolicy = ttPolicy;`,\n// \t\t`importScripts(ttPolicy?.createScriptURL('${scriptPath}') ?? '${scriptPath}');`,\n// \t\t`/*${label}*/`\n// \t].join('')], { type: 'application/javascript' });\n// \treturn URL.createObjectURL(blob);\n// }\n// ESM-comment-end\nfunction isPromiseLike(obj) {\n  if (typeof obj.then === 'function') {\n    return true;\n  }\n  return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker extends Disposable {\n  constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\n    super();\n    this.id = id;\n    this.label = label;\n    const workerOrPromise = getWorker(label);\n    if (isPromiseLike(workerOrPromise)) {\n      this.worker = workerOrPromise;\n    } else {\n      this.worker = Promise.resolve(workerOrPromise);\n    }\n    this.postMessage(moduleId, []);\n    this.worker.then(w => {\n      w.onmessage = function (ev) {\n        onMessageCallback(ev.data);\n      };\n      w.onmessageerror = onErrorCallback;\n      if (typeof w.addEventListener === 'function') {\n        w.addEventListener('error', onErrorCallback);\n      }\n    });\n    this._register(toDisposable(() => {\n      this.worker?.then(w => {\n        w.onmessage = null;\n        w.onmessageerror = null;\n        w.removeEventListener('error', onErrorCallback);\n        w.terminate();\n      });\n      this.worker = null;\n    }));\n  }\n  getId() {\n    return this.id;\n  }\n  postMessage(message, transfer) {\n    this.worker?.then(w => {\n      try {\n        w.postMessage(message, transfer);\n      } catch (err) {\n        onUnexpectedError(err);\n        onUnexpectedError(new Error(`FAILED to post message to '${this.label}'-worker`, {\n          cause: err\n        }));\n      }\n    });\n  }\n}\nexport class DefaultWorkerFactory {\n  constructor(label) {\n    this._label = label;\n    this._webWorkerFailedBeforeError = false;\n  }\n  create(moduleId, onMessageCallback, onErrorCallback) {\n    const workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n    if (this._webWorkerFailedBeforeError) {\n      throw this._webWorkerFailedBeforeError;\n    }\n    return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, err => {\n      logOnceWebWorkerWarning(err);\n      this._webWorkerFailedBeforeError = err;\n      onErrorCallback(err);\n    });\n  }\n}\n_DefaultWorkerFactory = DefaultWorkerFactory;\n_DefaultWorkerFactory.LAST_WORKER_ID = 0;","map":{"version":3,"names":["createTrustedTypesPolicy","onUnexpectedError","logOnceWebWorkerWarning","Disposable","toDisposable","ttPolicy","self","constructor","name","globalThis","workerttPolicy","undefined","createScriptURL","value","getWorker","label","monacoEnvironment","MonacoEnvironment","getWorkerUrl","workerUrl","Worker","Error","isPromiseLike","obj","then","WebWorker","moduleId","id","onMessageCallback","onErrorCallback","workerOrPromise","worker","Promise","resolve","postMessage","w","onmessage","ev","data","onmessageerror","addEventListener","_register","removeEventListener","terminate","getId","message","transfer","err","cause","DefaultWorkerFactory","_label","_webWorkerFailedBeforeError","create","workerId","LAST_WORKER_ID","_DefaultWorkerFactory"],"sources":["C:/Users/ruzhe/CODEHUB-PH/GAMES/code-master/node_modules/monaco-editor/esm/vs/base/browser/defaultWorkerFactory.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from './trustedTypes.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nimport { Disposable, toDisposable } from '../common/lifecycle.js';\n// Reuse the trusted types policy defined from worker bootstrap\n// when available.\n// Refs https://github.com/microsoft/vscode/issues/222193\nlet ttPolicy;\nif (typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope' && globalThis.workerttPolicy !== undefined) {\n    ttPolicy = globalThis.workerttPolicy;\n}\nelse {\n    ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });\n}\nfunction getWorker(label) {\n    const monacoEnvironment = globalThis.MonacoEnvironment;\n    if (monacoEnvironment) {\n        if (typeof monacoEnvironment.getWorker === 'function') {\n            return monacoEnvironment.getWorker('workerMain.js', label);\n        }\n        if (typeof monacoEnvironment.getWorkerUrl === 'function') {\n            const workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);\n            return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, { name: label });\n        }\n    }\n    // ESM-comment-begin\n    // \tif (typeof require === 'function') {\n    // \t\t// check if the JS lives on a different origin\n    // \t\tconst workerMain = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n    // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n    // \t}\n    // ESM-comment-end\n    throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\n// ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^((http:)|(https:)|(file:))/.test(scriptPath) && scriptPath.substring(0, globalThis.origin.length) !== globalThis.origin) {\n// \t\t// this is the cross-origin case\n// \t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t} else {\n// \t\tconst start = scriptPath.lastIndexOf('?');\n// \t\tconst end = scriptPath.lastIndexOf('#', start);\n// \t\tconst params = start > 0\n// \t\t\t? new URLSearchParams(scriptPath.substring(start + 1, ~end ? end : undefined))\n// \t\t\t: new URLSearchParams();\n// \n// \t\tCOI.addSearchParam(params, true, true);\n// \t\tconst search = params.toString();\n// \t\tif (!search) {\n// \t\t\tscriptPath = `${scriptPath}#${label}`;\n// \t\t} else {\n// \t\t\tscriptPath = `${scriptPath}?${params.toString()}#${label}`;\n// \t\t}\n// \t}\n// \n// \tconst factoryModuleId = 'vs/base/worker/defaultWorkerFactory.js';\n// \tconst workerBaseUrl = require.toUrl(factoryModuleId).slice(0, -factoryModuleId.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \tconst blob = new Blob([[\n// \t\t`/*${label}*/`,\n// \t\t`globalThis.MonacoEnvironment = { baseUrl: '${workerBaseUrl}' };`,\n// \t\t// VSCODE_GLOBALS: NLS\n// \t\t`globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(getNLSMessages())};`,\n// \t\t`globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(getNLSLanguage())};`,\n// \t\t`const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });`,\n// \t\t`globalThis.workerttPolicy = ttPolicy;`,\n// \t\t`importScripts(ttPolicy?.createScriptURL('${scriptPath}') ?? '${scriptPath}');`,\n// \t\t`/*${label}*/`\n// \t].join('')], { type: 'application/javascript' });\n// \treturn URL.createObjectURL(blob);\n// }\n// ESM-comment-end\nfunction isPromiseLike(obj) {\n    if (typeof obj.then === 'function') {\n        return true;\n    }\n    return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker extends Disposable {\n    constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\n        super();\n        this.id = id;\n        this.label = label;\n        const workerOrPromise = getWorker(label);\n        if (isPromiseLike(workerOrPromise)) {\n            this.worker = workerOrPromise;\n        }\n        else {\n            this.worker = Promise.resolve(workerOrPromise);\n        }\n        this.postMessage(moduleId, []);\n        this.worker.then((w) => {\n            w.onmessage = function (ev) {\n                onMessageCallback(ev.data);\n            };\n            w.onmessageerror = onErrorCallback;\n            if (typeof w.addEventListener === 'function') {\n                w.addEventListener('error', onErrorCallback);\n            }\n        });\n        this._register(toDisposable(() => {\n            this.worker?.then(w => {\n                w.onmessage = null;\n                w.onmessageerror = null;\n                w.removeEventListener('error', onErrorCallback);\n                w.terminate();\n            });\n            this.worker = null;\n        }));\n    }\n    getId() {\n        return this.id;\n    }\n    postMessage(message, transfer) {\n        this.worker?.then(w => {\n            try {\n                w.postMessage(message, transfer);\n            }\n            catch (err) {\n                onUnexpectedError(err);\n                onUnexpectedError(new Error(`FAILED to post message to '${this.label}'-worker`, { cause: err }));\n            }\n        });\n    }\n}\nexport class DefaultWorkerFactory {\n    static { this.LAST_WORKER_ID = 0; }\n    constructor(label) {\n        this._label = label;\n        this._webWorkerFailedBeforeError = false;\n    }\n    create(moduleId, onMessageCallback, onErrorCallback) {\n        const workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\n        if (this._webWorkerFailedBeforeError) {\n            throw this._webWorkerFailedBeforeError;\n        }\n        return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, (err) => {\n            logOnceWebWorkerWarning(err);\n            this._webWorkerFailedBeforeError = err;\n            onErrorCallback(err);\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}