{"ast":null,"code":"import { VueMonacoEditor } from '@guolao/vue-monaco-editor';\nimport { formatTime } from '@/utils/GameUtils';\nimport { mapGetters } from 'vuex';\nimport { savePreference, recordAttempt } from '@/utils/PreferencesService';\nimport GameData from '../GameData.json';\nexport default {\n  components: {\n    VueMonacoEditor\n  },\n  data() {\n    return {\n      currentChallenge: 0,\n      code: '',\n      feedback: '',\n      isCorrect: false,\n      score: 0,\n      challenges: [],\n      editorOptions: {\n        minimap: {\n          enabled: false\n        },\n        fontSize: 14,\n        wordWrap: 'on'\n      },\n      timer: null,\n      elapsedTime: 0,\n      showStartOverlay: true,\n      showEndOverlay: false,\n      editorTheme: '',\n      editorBorderColor: '',\n      challange: 'CSS-DEBUG-LVL-2',\n      attemptFileName: 'CSS-DEBUG-LVL-2-ATTEMPT'\n    };\n  },\n  computed: {\n    ...mapGetters(['currentTheme']),\n    description() {\n      return this.challenges[this.currentChallenge]?.description || 'No description available';\n    }\n  },\n  watch: {\n    currentChallenge(newVal) {\n      if (this.challenges[newVal]) {\n        this.code = this.challenges[newVal].code;\n        this.isCorrect = false;\n        this.feedback = '';\n      } else {\n        this.code = '';\n      }\n    }\n  },\n  mounted() {\n    if (this.challenges.length > 0) {\n      this.code = this.challenges[this.currentChallenge].code;\n    }\n    this.current_theme();\n  },\n  created() {\n    const id = 'css-game-lvl2';\n    const filterData = id => {\n      return GameData.DataForLvl2.filter(data => data.id === id);\n    };\n    this.challenges = filterData(id);\n  },\n  methods: {\n    current_theme() {\n      this.editorTheme = this.currentTheme === 'dark' ? 'vs-dark' : 'vs-light';\n      this.editorBorderColor = this.editorTheme === 'vs-dark' ? 'white' : 'black';\n    },\n    async save_game_data() {\n      const keys = this.challenge;\n      const payload = {\n        challenge: this.challenge,\n        score: this.score,\n        timeFinish: this.elapsedTime\n      };\n      await savePreference(keys, payload);\n      this.$router.go(-1);\n    },\n    async startGame() {\n      this.showStartOverlay = false;\n      this.startTimer();\n      await recordAttempt(this.attemptFileName);\n    },\n    exitGame() {\n      this.$router.go(-1);\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.elapsedTime++;\n      }, 1000);\n    },\n    submitCode() {\n      if (this.code.trim() === this.challenges[this.currentChallenge]?.solution.trim()) {\n        this.feedback = 'Correct! Well done!';\n        this.isCorrect = true;\n        this.score++;\n      } else {\n        this.feedback = 'Incorrect. Try again!';\n        this.isCorrect = false;\n      }\n    },\n    skipChallenge() {\n      this.currentChallenge++;\n      if (this.currentChallenge >= this.challenges.length) {\n        this.finishGame();\n      } else {\n        this.feedback = 'Skipped! Moving to the next challenge.';\n        this.isCorrect = false;\n      }\n    },\n    nextChallenge() {\n      if (this.isCorrect) {\n        this.currentChallenge++;\n      }\n    },\n    finishGame() {\n      clearInterval(this.timer);\n      this.showEndOverlay = true;\n    },\n    format_time(seconds) {\n      return formatTime(seconds);\n    }\n  }\n};","map":{"version":3,"names":["VueMonacoEditor","formatTime","mapGetters","savePreference","recordAttempt","GameData","components","data","currentChallenge","code","feedback","isCorrect","score","challenges","editorOptions","minimap","enabled","fontSize","wordWrap","timer","elapsedTime","showStartOverlay","showEndOverlay","editorTheme","editorBorderColor","challange","attemptFileName","computed","description","watch","newVal","mounted","length","current_theme","created","id","filterData","DataForLvl2","filter","methods","currentTheme","save_game_data","keys","challenge","payload","timeFinish","$router","go","startGame","startTimer","exitGame","setInterval","submitCode","trim","solution","skipChallenge","finishGame","nextChallenge","clearInterval","format_time","seconds"],"sources":["C:\\Users\\ruzhe\\CODEHUB-PH\\GAMES\\code-master\\src\\components\\Dashboard\\GameComponents\\CssMission\\CssLvl2.vue"],"sourcesContent":["<template>\r\n    <div class=\"debugging-challenge\">\r\n        <!-- Start Overlay -->\r\n        <div v-if=\"showStartOverlay\" class=\"start-overlay\">\r\n            <h2>Welcome to the Debugging Challenge</h2>\r\n            <button @click=\"startGame\">Start Game</button>\r\n            <button @click=\"exitGame\">Exit</button>\r\n\r\n        </div>\r\n\r\n        <!-- End Overlay -->\r\n        <div v-if=\"showEndOverlay\" class=\"end-overlay\">\r\n            <h2>Congratulations! You've completed all challenges.</h2>\r\n            <p>Total Time: {{ format_time(elapsedTime) }}</p>\r\n            <p>Challenges Completed: {{ score }} / {{ challenges.length }}</p>\r\n            <button @click=\"save_game_data\">End & Save</button>\r\n            <button @click=\"exitGame\">End</button>\r\n        </div>\r\n\r\n        <!-- Game Interface -->\r\n        <div v-else>\r\n            <h2>CSS Debugging Challenge {{ currentChallenge + 1 }}/25</h2>\r\n            <h4>Use inline css method</h4>\r\n            <p>{{ description }}</p>\r\n\r\n            <div class=\"editor-container\" :style=\"{borderColor:editorBorderColor}\">\r\n                <VueMonacoEditor v-model:value=\"code\" :theme=\"editorTheme\" language=\"html\" :options=\"editorOptions\" />\r\n            </div>\r\n\r\n            <button @click=\"submitCode\" class=\"debug-submit\">Submit</button>\r\n            <button @click=\"skipChallenge\" class=\"debug-skip\">Skip Challenge</button>\r\n            <p v-if=\"feedback\">{{ feedback }}</p>\r\n\r\n            <button v-if=\"isCorrect && currentChallenge < challenges.length - 1\" @click=\"nextChallenge\">Next\r\n                Challenge</button>\r\n            <button v-if=\"isCorrect && currentChallenge === challenges.length - 1\" @click=\"finishGame\">Finish\r\n                Game</button>\r\n\r\n            <!-- Timer -->\r\n            <div class=\"timer\">Time: {{ format_time(elapsedTime) }}</div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { VueMonacoEditor } from '@guolao/vue-monaco-editor';\r\nimport { formatTime } from '@/utils/GameUtils';\r\nimport { mapGetters } from 'vuex';\r\nimport { savePreference,recordAttempt } from '@/utils/PreferencesService';\r\nimport GameData from '../GameData.json';\r\nexport default {\r\n    components: {\r\n        VueMonacoEditor,\r\n    },\r\n    data() {\r\n        return {\r\n            currentChallenge: 0,\r\n            code: '',\r\n            feedback: '',\r\n            isCorrect: false,\r\n            score: 0,\r\n            challenges: [],\r\n            editorOptions: {\r\n                minimap: { enabled: false },\r\n                fontSize: 14,\r\n                wordWrap: 'on',\r\n            },\r\n            timer: null,\r\n            elapsedTime: 0,\r\n            showStartOverlay: true,\r\n            showEndOverlay: false,\r\n            editorTheme:'',\r\n            editorBorderColor:'',\r\n            challange:'CSS-DEBUG-LVL-2',\r\n            attemptFileName:'CSS-DEBUG-LVL-2-ATTEMPT',\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters(['currentTheme']),\r\n        description() {\r\n            return this.challenges[this.currentChallenge]?.description || 'No description available';\r\n        },\r\n    },\r\n    watch: {\r\n        currentChallenge(newVal) {\r\n            if (this.challenges[newVal]) {\r\n                this.code = this.challenges[newVal].code;\r\n                this.isCorrect = false;\r\n                this.feedback = '';\r\n            } else {\r\n                this.code = '';\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        if (this.challenges.length > 0) {\r\n            this.code = this.challenges[this.currentChallenge].code;\r\n        }\r\n        this.current_theme();\r\n    },\r\n    created(){\r\n        const id = 'css-game-lvl2';\r\n        const filterData = (id) =>{\r\n            return GameData.DataForLvl2.filter((data) => data.id === id);\r\n        }\r\n        this.challenges = filterData(id);\r\n    },\r\n    methods: {\r\n        current_theme(){\r\n            this.editorTheme = this.currentTheme === 'dark' ? 'vs-dark' : 'vs-light';\r\n            this.editorBorderColor = this.editorTheme === 'vs-dark' ? 'white' : 'black';\r\n        },\r\n        async save_game_data(){\r\n            const keys = this.challenge;\r\n            const payload = {\r\n                challenge:this.challenge,\r\n                score:this.score,\r\n                timeFinish:this.elapsedTime\r\n            };\r\n            await savePreference(keys,payload)\r\n            this.$router.go(-1);\r\n        },\r\n        async startGame() {\r\n            this.showStartOverlay = false;\r\n            this.startTimer();\r\n            await recordAttempt(this.attemptFileName);\r\n        },\r\n        exitGame() {\r\n            this.$router.go(-1)\r\n        },\r\n        startTimer() {\r\n            this.timer = setInterval(() => {\r\n                this.elapsedTime++;\r\n            }, 1000);\r\n        },\r\n        submitCode() {\r\n            if (this.code.trim() === this.challenges[this.currentChallenge]?.solution.trim()) {\r\n                this.feedback = 'Correct! Well done!';\r\n                this.isCorrect = true;\r\n                this.score++;\r\n            } else {\r\n                this.feedback = 'Incorrect. Try again!';\r\n                this.isCorrect = false;\r\n            }\r\n        },\r\n        skipChallenge() {\r\n            this.currentChallenge++;\r\n            if (this.currentChallenge >= this.challenges.length) {\r\n                this.finishGame();\r\n            } else {\r\n                this.feedback = 'Skipped! Moving to the next challenge.';\r\n                this.isCorrect = false;\r\n            }\r\n        },\r\n        nextChallenge() {\r\n            if (this.isCorrect) {\r\n                this.currentChallenge++;\r\n            }\r\n        },\r\n        finishGame() {\r\n            clearInterval(this.timer);\r\n            this.showEndOverlay = true;\r\n        },\r\n        format_time(seconds) {\r\n            return formatTime(seconds);\r\n        },\r\n    },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}