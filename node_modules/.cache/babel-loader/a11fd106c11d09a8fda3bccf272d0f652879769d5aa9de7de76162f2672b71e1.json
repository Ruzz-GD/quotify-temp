{"ast":null,"code":"import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\nexport const recordAttempt = async fileName => {\n  try {\n    let fileContent = await FileSystemService.readFile(fileName);\n    let attemptCount = 1;\n    if (fileContent) {\n      fileContent = JSON.parse(fileContent);\n      attemptCount = fileContent.attempt + 1;\n    }\n    const attemptData = {\n      attempt: attemptCount,\n      date: new Date().toISOString()\n    };\n    await FileSystemService.writeFile(fileName, JSON.stringify(attemptData));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const saveGameData = (filename, value1, value2, value3) => {\n  const gameData = {\n    challenge: value1,\n    score: value2,\n    timeFinish: value3\n  };\n  try {\n    FileSystemService.writeFile(filename, gameData);\n    console.log('data was save');\n  } catch (err) {\n    console.error(err);\n  }\n};\nconst FileSystemService = {\n  async writeFile(fileName, data) {\n    try {\n      await Filesystem.writeFile({\n        path: fileName,\n        data: JSON.stringify(data),\n        directory: Directory.Documents,\n        encoding: Encoding.UTF8\n      });\n      console.log('File written successfully!');\n    } catch (error) {\n      console.error('Error writing file:', error);\n    }\n  },\n  async readFile(fileName) {\n    try {\n      const result = await Filesystem.readFile({\n        path: fileName,\n        directory: Directory.Documents,\n        encoding: Encoding.UTF8\n      });\n      console.log('File content:', result.data);\n      return JSON.parse(result.data);\n    } catch (error) {\n      console.error('Error reading file:', error);\n    }\n  },\n  async deleteFile(fileName) {\n    try {\n      await Filesystem.deleteFile({\n        path: fileName,\n        directory: Directory.Documents\n      });\n      console.log('File deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting file:', error);\n    }\n  },\n  async listFiles() {\n    try {\n      const result = await Filesystem.readdir({\n        path: '',\n        directory: Directory.Documents\n      });\n      return result.files;\n    } catch (error) {\n      console.error('Error listing files:', error);\n    }\n  }\n};\nexport default FileSystemService;","map":{"version":3,"names":["Filesystem","Directory","Encoding","recordAttempt","fileName","fileContent","FileSystemService","readFile","attemptCount","JSON","parse","attempt","attemptData","date","Date","toISOString","writeFile","stringify","err","console","error","saveGameData","filename","value1","value2","value3","gameData","challenge","score","timeFinish","log","data","path","directory","Documents","encoding","UTF8","result","deleteFile","listFiles","readdir","files"],"sources":["C:/Users/ruzhe/CODEHUB-PH/GAMES/code-master/src/utils/FileSystemService.js"],"sourcesContent":["import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';\r\n\r\nexport const recordAttempt = async (fileName) => {\r\n  try{\r\n    let fileContent = await FileSystemService.readFile(fileName);\r\n\r\n    let attemptCount = 1;\r\n    if (fileContent) {\r\n        fileContent = JSON.parse(fileContent);\r\n        attemptCount = fileContent.attempt + 1; \r\n    }\r\n    const attemptData = {\r\n        attempt: attemptCount,\r\n        date: new Date().toISOString(), \r\n    };\r\n    await FileSystemService.writeFile(fileName, JSON.stringify(attemptData));  \r\n  }catch (err){\r\n    console.error(err)\r\n  }\r\n\r\n}\r\n\r\nexport const saveGameData = (filename,value1,value2,value3) =>{\r\n  const gameData = {\r\n    challenge : value1,\r\n    score : value2,\r\n    timeFinish : value3\r\n  }\r\n  try{\r\n    FileSystemService.writeFile(filename,gameData);\r\n    console.log('data was save')\r\n  }catch (err){\r\n    console.error(err)\r\n  }\r\n}\r\n\r\nconst FileSystemService = {\r\n  async writeFile(fileName, data) {\r\n    try {\r\n      await Filesystem.writeFile({\r\n        path: fileName,\r\n        data: JSON.stringify(data),\r\n        directory: Directory.Documents,\r\n        encoding: Encoding.UTF8, \r\n      });\r\n      console.log('File written successfully!');\r\n    } catch (error) {\r\n      console.error('Error writing file:', error);\r\n    }\r\n  },\r\n\r\n  async readFile(fileName) {\r\n    try {\r\n      const result = await Filesystem.readFile({\r\n        path: fileName,\r\n        directory: Directory.Documents,\r\n        encoding: Encoding.UTF8,\r\n      });\r\n      console.log('File content:', result.data);\r\n      return JSON.parse(result.data); \r\n    } catch (error) {\r\n      console.error('Error reading file:', error);\r\n    }\r\n  },\r\n\r\n  async deleteFile(fileName) {\r\n    try {\r\n      await Filesystem.deleteFile({\r\n        path: fileName,\r\n        directory: Directory.Documents,\r\n      });\r\n      console.log('File deleted successfully!');\r\n    } catch (error) {\r\n      console.error('Error deleting file:', error);\r\n    }\r\n  },\r\n\r\n  async listFiles() {\r\n    try {\r\n      const result = await Filesystem.readdir({\r\n        path: '',\r\n        directory: Directory.Documents,\r\n      });\r\n      return result.files;\r\n    } catch (error) {\r\n      console.error('Error listing files:', error);\r\n    }\r\n  },\r\n};\r\n\r\nexport default FileSystemService;\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,uBAAuB;AAEvE,OAAO,MAAMC,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAG;IACD,IAAIC,WAAW,GAAG,MAAMC,iBAAiB,CAACC,QAAQ,CAACH,QAAQ,CAAC;IAE5D,IAAII,YAAY,GAAG,CAAC;IACpB,IAAIH,WAAW,EAAE;MACbA,WAAW,GAAGI,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;MACrCG,YAAY,GAAGH,WAAW,CAACM,OAAO,GAAG,CAAC;IAC1C;IACA,MAAMC,WAAW,GAAG;MAChBD,OAAO,EAAEH,YAAY;MACrBK,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACjC,CAAC;IACD,MAAMT,iBAAiB,CAACU,SAAS,CAACZ,QAAQ,EAAEK,IAAI,CAACQ,SAAS,CAACL,WAAW,CAAC,CAAC;EAC1E,CAAC,QAAOM,GAAG,EAAC;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACpB;AAEF,CAAC;AAED,OAAO,MAAMG,YAAY,GAAGA,CAACC,QAAQ,EAACC,MAAM,EAACC,MAAM,EAACC,MAAM,KAAI;EAC5D,MAAMC,QAAQ,GAAG;IACfC,SAAS,EAAGJ,MAAM;IAClBK,KAAK,EAAGJ,MAAM;IACdK,UAAU,EAAGJ;EACf,CAAC;EACD,IAAG;IACDnB,iBAAiB,CAACU,SAAS,CAACM,QAAQ,EAACI,QAAQ,CAAC;IAC9CP,OAAO,CAACW,GAAG,CAAC,eAAe,CAAC;EAC9B,CAAC,QAAOZ,GAAG,EAAC;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACpB;AACF,CAAC;AAED,MAAMZ,iBAAiB,GAAG;EACxB,MAAMU,SAASA,CAACZ,QAAQ,EAAE2B,IAAI,EAAE;IAC9B,IAAI;MACF,MAAM/B,UAAU,CAACgB,SAAS,CAAC;QACzBgB,IAAI,EAAE5B,QAAQ;QACd2B,IAAI,EAAEtB,IAAI,CAACQ,SAAS,CAACc,IAAI,CAAC;QAC1BE,SAAS,EAAEhC,SAAS,CAACiC,SAAS;QAC9BC,QAAQ,EAAEjC,QAAQ,CAACkC;MACrB,CAAC,CAAC;MACFjB,OAAO,CAACW,GAAG,CAAC,4BAA4B,CAAC;IAC3C,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,MAAMb,QAAQA,CAACH,QAAQ,EAAE;IACvB,IAAI;MACF,MAAMiC,MAAM,GAAG,MAAMrC,UAAU,CAACO,QAAQ,CAAC;QACvCyB,IAAI,EAAE5B,QAAQ;QACd6B,SAAS,EAAEhC,SAAS,CAACiC,SAAS;QAC9BC,QAAQ,EAAEjC,QAAQ,CAACkC;MACrB,CAAC,CAAC;MACFjB,OAAO,CAACW,GAAG,CAAC,eAAe,EAAEO,MAAM,CAACN,IAAI,CAAC;MACzC,OAAOtB,IAAI,CAACC,KAAK,CAAC2B,MAAM,CAACN,IAAI,CAAC;IAChC,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,MAAMkB,UAAUA,CAAClC,QAAQ,EAAE;IACzB,IAAI;MACF,MAAMJ,UAAU,CAACsC,UAAU,CAAC;QAC1BN,IAAI,EAAE5B,QAAQ;QACd6B,SAAS,EAAEhC,SAAS,CAACiC;MACvB,CAAC,CAAC;MACFf,OAAO,CAACW,GAAG,CAAC,4BAA4B,CAAC;IAC3C,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAMmB,SAASA,CAAA,EAAG;IAChB,IAAI;MACF,MAAMF,MAAM,GAAG,MAAMrC,UAAU,CAACwC,OAAO,CAAC;QACtCR,IAAI,EAAE,EAAE;QACRC,SAAS,EAAEhC,SAAS,CAACiC;MACvB,CAAC,CAAC;MACF,OAAOG,MAAM,CAACI,KAAK;IACrB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF;AACF,CAAC;AAED,eAAed,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}