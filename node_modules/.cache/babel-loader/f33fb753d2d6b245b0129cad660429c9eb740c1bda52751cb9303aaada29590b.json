{"ast":null,"code":"var _PersistedMenuHideState;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar PersistedMenuHideState_1, MenuInfo_1;\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { DebounceEmitter, Emitter } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { isIMenuItem, isISubmenuItem, MenuItemAction, MenuRegistry, SubmenuItemAction } from './actions.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IContextKeyService } from '../../contextkey/common/contextkey.js';\nimport { Separator, toAction } from '../../../base/common/actions.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { removeFastWithoutKeepingOrder } from '../../../base/common/arrays.js';\nimport { localize } from '../../../nls.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nlet MenuService = class MenuService {\n  constructor(_commandService, _keybindingService, storageService) {\n    this._commandService = _commandService;\n    this._keybindingService = _keybindingService;\n    this._hiddenStates = new PersistedMenuHideState(storageService);\n  }\n  createMenu(id, contextKeyService, options) {\n    return new MenuImpl(id, this._hiddenStates, {\n      emitEventsForSubmenuChanges: false,\n      eventDebounceDelay: 50,\n      ...options\n    }, this._commandService, this._keybindingService, contextKeyService);\n  }\n  getMenuActions(id, contextKeyService, options) {\n    const menu = new MenuImpl(id, this._hiddenStates, {\n      emitEventsForSubmenuChanges: false,\n      eventDebounceDelay: 50,\n      ...options\n    }, this._commandService, this._keybindingService, contextKeyService);\n    const actions = menu.getActions(options);\n    menu.dispose();\n    return actions;\n  }\n  resetHiddenStates(ids) {\n    this._hiddenStates.reset(ids);\n  }\n};\nMenuService = __decorate([__param(0, ICommandService), __param(1, IKeybindingService), __param(2, IStorageService)], MenuService);\nexport { MenuService };\nlet PersistedMenuHideState = (_PersistedMenuHideState = class PersistedMenuHideState {\n  constructor(_storageService) {\n    this._storageService = _storageService;\n    this._disposables = new DisposableStore();\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this._ignoreChangeEvent = false;\n    this._hiddenByDefaultCache = new Map();\n    try {\n      const raw = _storageService.get(PersistedMenuHideState_1._key, 0 /* StorageScope.PROFILE */, '{}');\n      this._data = JSON.parse(raw);\n    } catch (err) {\n      this._data = Object.create(null);\n    }\n    this._disposables.add(_storageService.onDidChangeValue(0 /* StorageScope.PROFILE */, PersistedMenuHideState_1._key, this._disposables)(() => {\n      if (!this._ignoreChangeEvent) {\n        try {\n          const raw = _storageService.get(PersistedMenuHideState_1._key, 0 /* StorageScope.PROFILE */, '{}');\n          this._data = JSON.parse(raw);\n        } catch (err) {\n          console.log('FAILED to read storage after UPDATE', err);\n        }\n      }\n      this._onDidChange.fire();\n    }));\n  }\n  dispose() {\n    this._onDidChange.dispose();\n    this._disposables.dispose();\n  }\n  _isHiddenByDefault(menu, commandId) {\n    return this._hiddenByDefaultCache.get(`${menu.id}/${commandId}`) ?? false;\n  }\n  setDefaultState(menu, commandId, hidden) {\n    this._hiddenByDefaultCache.set(`${menu.id}/${commandId}`, hidden);\n  }\n  isHidden(menu, commandId) {\n    const hiddenByDefault = this._isHiddenByDefault(menu, commandId);\n    const state = this._data[menu.id]?.includes(commandId) ?? false;\n    return hiddenByDefault ? !state : state;\n  }\n  updateHidden(menu, commandId, hidden) {\n    const hiddenByDefault = this._isHiddenByDefault(menu, commandId);\n    if (hiddenByDefault) {\n      hidden = !hidden;\n    }\n    const entries = this._data[menu.id];\n    if (!hidden) {\n      // remove and cleanup\n      if (entries) {\n        const idx = entries.indexOf(commandId);\n        if (idx >= 0) {\n          removeFastWithoutKeepingOrder(entries, idx);\n        }\n        if (entries.length === 0) {\n          delete this._data[menu.id];\n        }\n      }\n    } else {\n      // add unless already added\n      if (!entries) {\n        this._data[menu.id] = [commandId];\n      } else {\n        const idx = entries.indexOf(commandId);\n        if (idx < 0) {\n          entries.push(commandId);\n        }\n      }\n    }\n    this._persist();\n  }\n  reset(menus) {\n    if (menus === undefined) {\n      // reset all\n      this._data = Object.create(null);\n      this._persist();\n    } else {\n      // reset only for a specific menu\n      for (const {\n        id\n      } of menus) {\n        if (this._data[id]) {\n          delete this._data[id];\n        }\n      }\n      this._persist();\n    }\n  }\n  _persist() {\n    try {\n      this._ignoreChangeEvent = true;\n      const raw = JSON.stringify(this._data);\n      this._storageService.store(PersistedMenuHideState_1._key, raw, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n    } finally {\n      this._ignoreChangeEvent = false;\n    }\n  }\n}, PersistedMenuHideState_1 = _PersistedMenuHideState, _PersistedMenuHideState._key = 'menu.hiddenCommands', _PersistedMenuHideState);\nPersistedMenuHideState = PersistedMenuHideState_1 = __decorate([__param(0, IStorageService)], PersistedMenuHideState);\nclass MenuInfoSnapshot {\n  constructor(_id, _collectContextKeysForSubmenus) {\n    this._id = _id;\n    this._collectContextKeysForSubmenus = _collectContextKeysForSubmenus;\n    this._menuGroups = [];\n    this._structureContextKeys = new Set();\n    this._preconditionContextKeys = new Set();\n    this._toggledContextKeys = new Set();\n    this.refresh();\n  }\n  get structureContextKeys() {\n    return this._structureContextKeys;\n  }\n  get preconditionContextKeys() {\n    return this._preconditionContextKeys;\n  }\n  get toggledContextKeys() {\n    return this._toggledContextKeys;\n  }\n  refresh() {\n    // reset\n    this._menuGroups.length = 0;\n    this._structureContextKeys.clear();\n    this._preconditionContextKeys.clear();\n    this._toggledContextKeys.clear();\n    const menuItems = this._sort(MenuRegistry.getMenuItems(this._id));\n    let group;\n    for (const item of menuItems) {\n      // group by groupId\n      const groupName = item.group || '';\n      if (!group || group[0] !== groupName) {\n        group = [groupName, []];\n        this._menuGroups.push(group);\n      }\n      group[1].push(item);\n      // keep keys for eventing\n      this._collectContextKeys(item);\n    }\n  }\n  _sort(menuItems) {\n    // no sorting needed in snapshot\n    return menuItems;\n  }\n  _collectContextKeys(item) {\n    MenuInfoSnapshot._fillInKbExprKeys(item.when, this._structureContextKeys);\n    if (isIMenuItem(item)) {\n      // keep precondition keys for event if applicable\n      if (item.command.precondition) {\n        MenuInfoSnapshot._fillInKbExprKeys(item.command.precondition, this._preconditionContextKeys);\n      }\n      // keep toggled keys for event if applicable\n      if (item.command.toggled) {\n        const toggledExpression = item.command.toggled.condition || item.command.toggled;\n        MenuInfoSnapshot._fillInKbExprKeys(toggledExpression, this._toggledContextKeys);\n      }\n    } else if (this._collectContextKeysForSubmenus) {\n      // recursively collect context keys from submenus so that this\n      // menu fires events when context key changes affect submenus\n      MenuRegistry.getMenuItems(item.submenu).forEach(this._collectContextKeys, this);\n    }\n  }\n  static _fillInKbExprKeys(exp, set) {\n    if (exp) {\n      for (const key of exp.keys()) {\n        set.add(key);\n      }\n    }\n  }\n}\nlet MenuInfo = MenuInfo_1 = class MenuInfo extends MenuInfoSnapshot {\n  constructor(_id, _hiddenStates, _collectContextKeysForSubmenus, _commandService, _keybindingService, _contextKeyService) {\n    super(_id, _collectContextKeysForSubmenus);\n    this._hiddenStates = _hiddenStates;\n    this._commandService = _commandService;\n    this._keybindingService = _keybindingService;\n    this._contextKeyService = _contextKeyService;\n    this.refresh();\n  }\n  createActionGroups(options) {\n    const result = [];\n    for (const group of this._menuGroups) {\n      const [id, items] = group;\n      let activeActions;\n      for (const item of items) {\n        if (this._contextKeyService.contextMatchesRules(item.when)) {\n          const isMenuItem = isIMenuItem(item);\n          if (isMenuItem) {\n            this._hiddenStates.setDefaultState(this._id, item.command.id, !!item.isHiddenByDefault);\n          }\n          const menuHide = createMenuHide(this._id, isMenuItem ? item.command : item, this._hiddenStates);\n          if (isMenuItem) {\n            // MenuItemAction\n            const menuKeybinding = createConfigureKeybindingAction(this._commandService, this._keybindingService, item.command.id, item.when);\n            (activeActions ??= []).push(new MenuItemAction(item.command, item.alt, options, menuHide, menuKeybinding, this._contextKeyService, this._commandService));\n          } else {\n            // SubmenuItemAction\n            const groups = new MenuInfo_1(item.submenu, this._hiddenStates, this._collectContextKeysForSubmenus, this._commandService, this._keybindingService, this._contextKeyService).createActionGroups(options);\n            const submenuActions = Separator.join(...groups.map(g => g[1]));\n            if (submenuActions.length > 0) {\n              (activeActions ??= []).push(new SubmenuItemAction(item, menuHide, submenuActions));\n            }\n          }\n        }\n      }\n      if (activeActions && activeActions.length > 0) {\n        result.push([id, activeActions]);\n      }\n    }\n    return result;\n  }\n  _sort(menuItems) {\n    return menuItems.sort(MenuInfo_1._compareMenuItems);\n  }\n  static _compareMenuItems(a, b) {\n    const aGroup = a.group;\n    const bGroup = b.group;\n    if (aGroup !== bGroup) {\n      // Falsy groups come last\n      if (!aGroup) {\n        return 1;\n      } else if (!bGroup) {\n        return -1;\n      }\n      // 'navigation' group comes first\n      if (aGroup === 'navigation') {\n        return -1;\n      } else if (bGroup === 'navigation') {\n        return 1;\n      }\n      // lexical sort for groups\n      const value = aGroup.localeCompare(bGroup);\n      if (value !== 0) {\n        return value;\n      }\n    }\n    // sort on priority - default is 0\n    const aPrio = a.order || 0;\n    const bPrio = b.order || 0;\n    if (aPrio < bPrio) {\n      return -1;\n    } else if (aPrio > bPrio) {\n      return 1;\n    }\n    // sort on titles\n    return MenuInfo_1._compareTitles(isIMenuItem(a) ? a.command.title : a.title, isIMenuItem(b) ? b.command.title : b.title);\n  }\n  static _compareTitles(a, b) {\n    const aStr = typeof a === 'string' ? a : a.original;\n    const bStr = typeof b === 'string' ? b : b.original;\n    return aStr.localeCompare(bStr);\n  }\n};\nMenuInfo = MenuInfo_1 = __decorate([__param(3, ICommandService), __param(4, IKeybindingService), __param(5, IContextKeyService)], MenuInfo);\nlet MenuImpl = class MenuImpl {\n  constructor(id, hiddenStates, options, commandService, keybindingService, contextKeyService) {\n    this._disposables = new DisposableStore();\n    this._menuInfo = new MenuInfo(id, hiddenStates, options.emitEventsForSubmenuChanges, commandService, keybindingService, contextKeyService);\n    // Rebuild this menu whenever the menu registry reports an event for this MenuId.\n    // This usually happen while code and extensions are loaded and affects the over\n    // structure of the menu\n    const rebuildMenuSoon = new RunOnceScheduler(() => {\n      this._menuInfo.refresh();\n      this._onDidChange.fire({\n        menu: this,\n        isStructuralChange: true,\n        isEnablementChange: true,\n        isToggleChange: true\n      });\n    }, options.eventDebounceDelay);\n    this._disposables.add(rebuildMenuSoon);\n    this._disposables.add(MenuRegistry.onDidChangeMenu(e => {\n      if (e.has(id)) {\n        rebuildMenuSoon.schedule();\n      }\n    }));\n    // When context keys or storage state changes we need to check if the menu also has changed. However,\n    // we only do that when someone listens on this menu because (1) these events are\n    // firing often and (2) menu are often leaked\n    const lazyListener = this._disposables.add(new DisposableStore());\n    const merge = events => {\n      let isStructuralChange = false;\n      let isEnablementChange = false;\n      let isToggleChange = false;\n      for (const item of events) {\n        isStructuralChange = isStructuralChange || item.isStructuralChange;\n        isEnablementChange = isEnablementChange || item.isEnablementChange;\n        isToggleChange = isToggleChange || item.isToggleChange;\n        if (isStructuralChange && isEnablementChange && isToggleChange) {\n          // everything is TRUE, no need to continue iterating\n          break;\n        }\n      }\n      return {\n        menu: this,\n        isStructuralChange,\n        isEnablementChange,\n        isToggleChange\n      };\n    };\n    const startLazyListener = () => {\n      lazyListener.add(contextKeyService.onDidChangeContext(e => {\n        const isStructuralChange = e.affectsSome(this._menuInfo.structureContextKeys);\n        const isEnablementChange = e.affectsSome(this._menuInfo.preconditionContextKeys);\n        const isToggleChange = e.affectsSome(this._menuInfo.toggledContextKeys);\n        if (isStructuralChange || isEnablementChange || isToggleChange) {\n          this._onDidChange.fire({\n            menu: this,\n            isStructuralChange,\n            isEnablementChange,\n            isToggleChange\n          });\n        }\n      }));\n      lazyListener.add(hiddenStates.onDidChange(e => {\n        this._onDidChange.fire({\n          menu: this,\n          isStructuralChange: true,\n          isEnablementChange: false,\n          isToggleChange: false\n        });\n      }));\n    };\n    this._onDidChange = new DebounceEmitter({\n      // start/stop context key listener\n      onWillAddFirstListener: startLazyListener,\n      onDidRemoveLastListener: lazyListener.clear.bind(lazyListener),\n      delay: options.eventDebounceDelay,\n      merge\n    });\n    this.onDidChange = this._onDidChange.event;\n  }\n  getActions(options) {\n    return this._menuInfo.createActionGroups(options);\n  }\n  dispose() {\n    this._disposables.dispose();\n    this._onDidChange.dispose();\n  }\n};\nMenuImpl = __decorate([__param(3, ICommandService), __param(4, IKeybindingService), __param(5, IContextKeyService)], MenuImpl);\nfunction createMenuHide(menu, command, states) {\n  const id = isISubmenuItem(command) ? command.submenu.id : command.id;\n  const title = typeof command.title === 'string' ? command.title : command.title.value;\n  const hide = toAction({\n    id: `hide/${menu.id}/${id}`,\n    label: localize('hide.label', 'Hide \\'{0}\\'', title),\n    run() {\n      states.updateHidden(menu, id, true);\n    }\n  });\n  const toggle = toAction({\n    id: `toggle/${menu.id}/${id}`,\n    label: title,\n    get checked() {\n      return !states.isHidden(menu, id);\n    },\n    run() {\n      states.updateHidden(menu, id, !!this.checked);\n    }\n  });\n  return {\n    hide,\n    toggle,\n    get isHidden() {\n      return !toggle.checked;\n    }\n  };\n}\nexport function createConfigureKeybindingAction(commandService, keybindingService, commandId, when = undefined, enabled = true) {\n  return toAction({\n    id: `configureKeybinding/${commandId}`,\n    label: localize('configure keybinding', \"Configure Keybinding\"),\n    enabled,\n    run() {\n      // Only set the when clause when there is no keybinding\n      // It is possible that the action and the keybinding have different when clauses\n      const hasKeybinding = !!keybindingService.lookupKeybinding(commandId); // This may only be called inside the `run()` method as it can be expensive on startup. #210529\n      const whenValue = !hasKeybinding && when ? when.serialize() : undefined;\n      commandService.executeCommand('workbench.action.openGlobalKeybindings', `@command:${commandId}` + (whenValue ? ` +when:${whenValue}` : ''));\n    }\n  });\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","PersistedMenuHideState_1","MenuInfo_1","RunOnceScheduler","DebounceEmitter","Emitter","DisposableStore","isIMenuItem","isISubmenuItem","MenuItemAction","MenuRegistry","SubmenuItemAction","ICommandService","IContextKeyService","Separator","toAction","IStorageService","removeFastWithoutKeepingOrder","localize","IKeybindingService","MenuService","constructor","_commandService","_keybindingService","storageService","_hiddenStates","PersistedMenuHideState","createMenu","id","contextKeyService","options","MenuImpl","emitEventsForSubmenuChanges","eventDebounceDelay","getMenuActions","menu","actions","getActions","dispose","resetHiddenStates","ids","reset","_PersistedMenuHideState","_storageService","_disposables","_onDidChange","onDidChange","event","_ignoreChangeEvent","_hiddenByDefaultCache","Map","raw","get","_key","_data","JSON","parse","err","create","add","onDidChangeValue","console","log","fire","_isHiddenByDefault","commandId","setDefaultState","hidden","set","isHidden","hiddenByDefault","state","includes","updateHidden","entries","idx","indexOf","push","_persist","menus","undefined","stringify","store","MenuInfoSnapshot","_id","_collectContextKeysForSubmenus","_menuGroups","_structureContextKeys","Set","_preconditionContextKeys","_toggledContextKeys","refresh","structureContextKeys","preconditionContextKeys","toggledContextKeys","clear","menuItems","_sort","getMenuItems","group","item","groupName","_collectContextKeys","_fillInKbExprKeys","when","command","precondition","toggled","toggledExpression","condition","submenu","forEach","exp","keys","MenuInfo","_contextKeyService","createActionGroups","result","items","activeActions","contextMatchesRules","isMenuItem","isHiddenByDefault","menuHide","createMenuHide","menuKeybinding","createConfigureKeybindingAction","alt","groups","submenuActions","join","map","g","sort","_compareMenuItems","a","b","aGroup","bGroup","value","localeCompare","aPrio","order","bPrio","_compareTitles","title","aStr","original","bStr","hiddenStates","commandService","keybindingService","_menuInfo","rebuildMenuSoon","isStructuralChange","isEnablementChange","isToggleChange","onDidChangeMenu","e","has","schedule","lazyListener","merge","events","startLazyListener","onDidChangeContext","affectsSome","onWillAddFirstListener","onDidRemoveLastListener","bind","delay","states","hide","label","run","toggle","checked","enabled","hasKeybinding","lookupKeybinding","whenValue","serialize","executeCommand"],"sources":["C:/Users/ruzhe/CODEHUB-PH/GAMES/code-master/node_modules/monaco-editor/esm/vs/platform/actions/common/menuService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar PersistedMenuHideState_1, MenuInfo_1;\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { DebounceEmitter, Emitter } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { isIMenuItem, isISubmenuItem, MenuItemAction, MenuRegistry, SubmenuItemAction } from './actions.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IContextKeyService } from '../../contextkey/common/contextkey.js';\nimport { Separator, toAction } from '../../../base/common/actions.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { removeFastWithoutKeepingOrder } from '../../../base/common/arrays.js';\nimport { localize } from '../../../nls.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nlet MenuService = class MenuService {\n    constructor(_commandService, _keybindingService, storageService) {\n        this._commandService = _commandService;\n        this._keybindingService = _keybindingService;\n        this._hiddenStates = new PersistedMenuHideState(storageService);\n    }\n    createMenu(id, contextKeyService, options) {\n        return new MenuImpl(id, this._hiddenStates, { emitEventsForSubmenuChanges: false, eventDebounceDelay: 50, ...options }, this._commandService, this._keybindingService, contextKeyService);\n    }\n    getMenuActions(id, contextKeyService, options) {\n        const menu = new MenuImpl(id, this._hiddenStates, { emitEventsForSubmenuChanges: false, eventDebounceDelay: 50, ...options }, this._commandService, this._keybindingService, contextKeyService);\n        const actions = menu.getActions(options);\n        menu.dispose();\n        return actions;\n    }\n    resetHiddenStates(ids) {\n        this._hiddenStates.reset(ids);\n    }\n};\nMenuService = __decorate([\n    __param(0, ICommandService),\n    __param(1, IKeybindingService),\n    __param(2, IStorageService)\n], MenuService);\nexport { MenuService };\nlet PersistedMenuHideState = class PersistedMenuHideState {\n    static { PersistedMenuHideState_1 = this; }\n    static { this._key = 'menu.hiddenCommands'; }\n    constructor(_storageService) {\n        this._storageService = _storageService;\n        this._disposables = new DisposableStore();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._ignoreChangeEvent = false;\n        this._hiddenByDefaultCache = new Map();\n        try {\n            const raw = _storageService.get(PersistedMenuHideState_1._key, 0 /* StorageScope.PROFILE */, '{}');\n            this._data = JSON.parse(raw);\n        }\n        catch (err) {\n            this._data = Object.create(null);\n        }\n        this._disposables.add(_storageService.onDidChangeValue(0 /* StorageScope.PROFILE */, PersistedMenuHideState_1._key, this._disposables)(() => {\n            if (!this._ignoreChangeEvent) {\n                try {\n                    const raw = _storageService.get(PersistedMenuHideState_1._key, 0 /* StorageScope.PROFILE */, '{}');\n                    this._data = JSON.parse(raw);\n                }\n                catch (err) {\n                    console.log('FAILED to read storage after UPDATE', err);\n                }\n            }\n            this._onDidChange.fire();\n        }));\n    }\n    dispose() {\n        this._onDidChange.dispose();\n        this._disposables.dispose();\n    }\n    _isHiddenByDefault(menu, commandId) {\n        return this._hiddenByDefaultCache.get(`${menu.id}/${commandId}`) ?? false;\n    }\n    setDefaultState(menu, commandId, hidden) {\n        this._hiddenByDefaultCache.set(`${menu.id}/${commandId}`, hidden);\n    }\n    isHidden(menu, commandId) {\n        const hiddenByDefault = this._isHiddenByDefault(menu, commandId);\n        const state = this._data[menu.id]?.includes(commandId) ?? false;\n        return hiddenByDefault ? !state : state;\n    }\n    updateHidden(menu, commandId, hidden) {\n        const hiddenByDefault = this._isHiddenByDefault(menu, commandId);\n        if (hiddenByDefault) {\n            hidden = !hidden;\n        }\n        const entries = this._data[menu.id];\n        if (!hidden) {\n            // remove and cleanup\n            if (entries) {\n                const idx = entries.indexOf(commandId);\n                if (idx >= 0) {\n                    removeFastWithoutKeepingOrder(entries, idx);\n                }\n                if (entries.length === 0) {\n                    delete this._data[menu.id];\n                }\n            }\n        }\n        else {\n            // add unless already added\n            if (!entries) {\n                this._data[menu.id] = [commandId];\n            }\n            else {\n                const idx = entries.indexOf(commandId);\n                if (idx < 0) {\n                    entries.push(commandId);\n                }\n            }\n        }\n        this._persist();\n    }\n    reset(menus) {\n        if (menus === undefined) {\n            // reset all\n            this._data = Object.create(null);\n            this._persist();\n        }\n        else {\n            // reset only for a specific menu\n            for (const { id } of menus) {\n                if (this._data[id]) {\n                    delete this._data[id];\n                }\n            }\n            this._persist();\n        }\n    }\n    _persist() {\n        try {\n            this._ignoreChangeEvent = true;\n            const raw = JSON.stringify(this._data);\n            this._storageService.store(PersistedMenuHideState_1._key, raw, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        }\n        finally {\n            this._ignoreChangeEvent = false;\n        }\n    }\n};\nPersistedMenuHideState = PersistedMenuHideState_1 = __decorate([\n    __param(0, IStorageService)\n], PersistedMenuHideState);\nclass MenuInfoSnapshot {\n    constructor(_id, _collectContextKeysForSubmenus) {\n        this._id = _id;\n        this._collectContextKeysForSubmenus = _collectContextKeysForSubmenus;\n        this._menuGroups = [];\n        this._structureContextKeys = new Set();\n        this._preconditionContextKeys = new Set();\n        this._toggledContextKeys = new Set();\n        this.refresh();\n    }\n    get structureContextKeys() {\n        return this._structureContextKeys;\n    }\n    get preconditionContextKeys() {\n        return this._preconditionContextKeys;\n    }\n    get toggledContextKeys() {\n        return this._toggledContextKeys;\n    }\n    refresh() {\n        // reset\n        this._menuGroups.length = 0;\n        this._structureContextKeys.clear();\n        this._preconditionContextKeys.clear();\n        this._toggledContextKeys.clear();\n        const menuItems = this._sort(MenuRegistry.getMenuItems(this._id));\n        let group;\n        for (const item of menuItems) {\n            // group by groupId\n            const groupName = item.group || '';\n            if (!group || group[0] !== groupName) {\n                group = [groupName, []];\n                this._menuGroups.push(group);\n            }\n            group[1].push(item);\n            // keep keys for eventing\n            this._collectContextKeys(item);\n        }\n    }\n    _sort(menuItems) {\n        // no sorting needed in snapshot\n        return menuItems;\n    }\n    _collectContextKeys(item) {\n        MenuInfoSnapshot._fillInKbExprKeys(item.when, this._structureContextKeys);\n        if (isIMenuItem(item)) {\n            // keep precondition keys for event if applicable\n            if (item.command.precondition) {\n                MenuInfoSnapshot._fillInKbExprKeys(item.command.precondition, this._preconditionContextKeys);\n            }\n            // keep toggled keys for event if applicable\n            if (item.command.toggled) {\n                const toggledExpression = item.command.toggled.condition || item.command.toggled;\n                MenuInfoSnapshot._fillInKbExprKeys(toggledExpression, this._toggledContextKeys);\n            }\n        }\n        else if (this._collectContextKeysForSubmenus) {\n            // recursively collect context keys from submenus so that this\n            // menu fires events when context key changes affect submenus\n            MenuRegistry.getMenuItems(item.submenu).forEach(this._collectContextKeys, this);\n        }\n    }\n    static _fillInKbExprKeys(exp, set) {\n        if (exp) {\n            for (const key of exp.keys()) {\n                set.add(key);\n            }\n        }\n    }\n}\nlet MenuInfo = MenuInfo_1 = class MenuInfo extends MenuInfoSnapshot {\n    constructor(_id, _hiddenStates, _collectContextKeysForSubmenus, _commandService, _keybindingService, _contextKeyService) {\n        super(_id, _collectContextKeysForSubmenus);\n        this._hiddenStates = _hiddenStates;\n        this._commandService = _commandService;\n        this._keybindingService = _keybindingService;\n        this._contextKeyService = _contextKeyService;\n        this.refresh();\n    }\n    createActionGroups(options) {\n        const result = [];\n        for (const group of this._menuGroups) {\n            const [id, items] = group;\n            let activeActions;\n            for (const item of items) {\n                if (this._contextKeyService.contextMatchesRules(item.when)) {\n                    const isMenuItem = isIMenuItem(item);\n                    if (isMenuItem) {\n                        this._hiddenStates.setDefaultState(this._id, item.command.id, !!item.isHiddenByDefault);\n                    }\n                    const menuHide = createMenuHide(this._id, isMenuItem ? item.command : item, this._hiddenStates);\n                    if (isMenuItem) {\n                        // MenuItemAction\n                        const menuKeybinding = createConfigureKeybindingAction(this._commandService, this._keybindingService, item.command.id, item.when);\n                        (activeActions ??= []).push(new MenuItemAction(item.command, item.alt, options, menuHide, menuKeybinding, this._contextKeyService, this._commandService));\n                    }\n                    else {\n                        // SubmenuItemAction\n                        const groups = new MenuInfo_1(item.submenu, this._hiddenStates, this._collectContextKeysForSubmenus, this._commandService, this._keybindingService, this._contextKeyService).createActionGroups(options);\n                        const submenuActions = Separator.join(...groups.map(g => g[1]));\n                        if (submenuActions.length > 0) {\n                            (activeActions ??= []).push(new SubmenuItemAction(item, menuHide, submenuActions));\n                        }\n                    }\n                }\n            }\n            if (activeActions && activeActions.length > 0) {\n                result.push([id, activeActions]);\n            }\n        }\n        return result;\n    }\n    _sort(menuItems) {\n        return menuItems.sort(MenuInfo_1._compareMenuItems);\n    }\n    static _compareMenuItems(a, b) {\n        const aGroup = a.group;\n        const bGroup = b.group;\n        if (aGroup !== bGroup) {\n            // Falsy groups come last\n            if (!aGroup) {\n                return 1;\n            }\n            else if (!bGroup) {\n                return -1;\n            }\n            // 'navigation' group comes first\n            if (aGroup === 'navigation') {\n                return -1;\n            }\n            else if (bGroup === 'navigation') {\n                return 1;\n            }\n            // lexical sort for groups\n            const value = aGroup.localeCompare(bGroup);\n            if (value !== 0) {\n                return value;\n            }\n        }\n        // sort on priority - default is 0\n        const aPrio = a.order || 0;\n        const bPrio = b.order || 0;\n        if (aPrio < bPrio) {\n            return -1;\n        }\n        else if (aPrio > bPrio) {\n            return 1;\n        }\n        // sort on titles\n        return MenuInfo_1._compareTitles(isIMenuItem(a) ? a.command.title : a.title, isIMenuItem(b) ? b.command.title : b.title);\n    }\n    static _compareTitles(a, b) {\n        const aStr = typeof a === 'string' ? a : a.original;\n        const bStr = typeof b === 'string' ? b : b.original;\n        return aStr.localeCompare(bStr);\n    }\n};\nMenuInfo = MenuInfo_1 = __decorate([\n    __param(3, ICommandService),\n    __param(4, IKeybindingService),\n    __param(5, IContextKeyService)\n], MenuInfo);\nlet MenuImpl = class MenuImpl {\n    constructor(id, hiddenStates, options, commandService, keybindingService, contextKeyService) {\n        this._disposables = new DisposableStore();\n        this._menuInfo = new MenuInfo(id, hiddenStates, options.emitEventsForSubmenuChanges, commandService, keybindingService, contextKeyService);\n        // Rebuild this menu whenever the menu registry reports an event for this MenuId.\n        // This usually happen while code and extensions are loaded and affects the over\n        // structure of the menu\n        const rebuildMenuSoon = new RunOnceScheduler(() => {\n            this._menuInfo.refresh();\n            this._onDidChange.fire({ menu: this, isStructuralChange: true, isEnablementChange: true, isToggleChange: true });\n        }, options.eventDebounceDelay);\n        this._disposables.add(rebuildMenuSoon);\n        this._disposables.add(MenuRegistry.onDidChangeMenu(e => {\n            if (e.has(id)) {\n                rebuildMenuSoon.schedule();\n            }\n        }));\n        // When context keys or storage state changes we need to check if the menu also has changed. However,\n        // we only do that when someone listens on this menu because (1) these events are\n        // firing often and (2) menu are often leaked\n        const lazyListener = this._disposables.add(new DisposableStore());\n        const merge = (events) => {\n            let isStructuralChange = false;\n            let isEnablementChange = false;\n            let isToggleChange = false;\n            for (const item of events) {\n                isStructuralChange = isStructuralChange || item.isStructuralChange;\n                isEnablementChange = isEnablementChange || item.isEnablementChange;\n                isToggleChange = isToggleChange || item.isToggleChange;\n                if (isStructuralChange && isEnablementChange && isToggleChange) {\n                    // everything is TRUE, no need to continue iterating\n                    break;\n                }\n            }\n            return { menu: this, isStructuralChange, isEnablementChange, isToggleChange };\n        };\n        const startLazyListener = () => {\n            lazyListener.add(contextKeyService.onDidChangeContext(e => {\n                const isStructuralChange = e.affectsSome(this._menuInfo.structureContextKeys);\n                const isEnablementChange = e.affectsSome(this._menuInfo.preconditionContextKeys);\n                const isToggleChange = e.affectsSome(this._menuInfo.toggledContextKeys);\n                if (isStructuralChange || isEnablementChange || isToggleChange) {\n                    this._onDidChange.fire({ menu: this, isStructuralChange, isEnablementChange, isToggleChange });\n                }\n            }));\n            lazyListener.add(hiddenStates.onDidChange(e => {\n                this._onDidChange.fire({ menu: this, isStructuralChange: true, isEnablementChange: false, isToggleChange: false });\n            }));\n        };\n        this._onDidChange = new DebounceEmitter({\n            // start/stop context key listener\n            onWillAddFirstListener: startLazyListener,\n            onDidRemoveLastListener: lazyListener.clear.bind(lazyListener),\n            delay: options.eventDebounceDelay,\n            merge\n        });\n        this.onDidChange = this._onDidChange.event;\n    }\n    getActions(options) {\n        return this._menuInfo.createActionGroups(options);\n    }\n    dispose() {\n        this._disposables.dispose();\n        this._onDidChange.dispose();\n    }\n};\nMenuImpl = __decorate([\n    __param(3, ICommandService),\n    __param(4, IKeybindingService),\n    __param(5, IContextKeyService)\n], MenuImpl);\nfunction createMenuHide(menu, command, states) {\n    const id = isISubmenuItem(command) ? command.submenu.id : command.id;\n    const title = typeof command.title === 'string' ? command.title : command.title.value;\n    const hide = toAction({\n        id: `hide/${menu.id}/${id}`,\n        label: localize('hide.label', 'Hide \\'{0}\\'', title),\n        run() { states.updateHidden(menu, id, true); }\n    });\n    const toggle = toAction({\n        id: `toggle/${menu.id}/${id}`,\n        label: title,\n        get checked() { return !states.isHidden(menu, id); },\n        run() { states.updateHidden(menu, id, !!this.checked); }\n    });\n    return {\n        hide,\n        toggle,\n        get isHidden() { return !toggle.checked; },\n    };\n}\nexport function createConfigureKeybindingAction(commandService, keybindingService, commandId, when = undefined, enabled = true) {\n    return toAction({\n        id: `configureKeybinding/${commandId}`,\n        label: localize('configure keybinding', \"Configure Keybinding\"),\n        enabled,\n        run() {\n            // Only set the when clause when there is no keybinding\n            // It is possible that the action and the keybinding have different when clauses\n            const hasKeybinding = !!keybindingService.lookupKeybinding(commandId); // This may only be called inside the `run()` method as it can be expensive on startup. #210529\n            const whenValue = !hasKeybinding && when ? when.serialize() : undefined;\n            commandService.executeCommand('workbench.action.openGlobalKeybindings', `@command:${commandId}` + (whenValue ? ` +when:${whenValue}` : ''));\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}