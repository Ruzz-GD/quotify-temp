{"ast":null,"code":"import { mapGetters } from \"vuex\";\nimport { shuffleArray, formatTime } from \"../../../../utils/GameUtils\";\nimport GameData from \"../GameData.json\";\nimport { savePreference, recordAttempt } from \"@/utils/PreferencesService\";\nexport default {\n  data() {\n    return {\n      questions: [],\n      currentQuestionIndex: 0,\n      score: 0,\n      timer: null,\n      elapsedTime: 0,\n      showStartOverlay: true,\n      showEndOverlay: false,\n      optionFontcolor: \"\",\n      challenge: 'HTML-QUIZ-LVL-1',\n      attemptFileName: 'HTML-QUIZ-LVL-1-ATTEMPT'\n    };\n  },\n  computed: {\n    ...mapGetters([\"currentTheme\"]),\n    currentQuestion() {\n      return this.questions[this.currentQuestionIndex];\n    }\n  },\n  methods: {\n    async save_game_data() {\n      const keys = this.challenge;\n      const payload = {\n        challenge: this.challenge,\n        score: this.score,\n        timeFinish: this.elapsedTime\n      };\n      await savePreference(keys, payload);\n      this.$router.go(-1);\n    },\n    current_theme() {\n      this.optionFontcolor = this.currentTheme === \"dark\" ? \"white\" : \"black\";\n    },\n    checkAnswer(selectedOption) {\n      if (selectedOption === this.currentQuestion.answer) {\n        this.score++;\n      }\n      this.currentQuestionIndex++;\n      if (this.currentQuestionIndex >= this.questions.length) {\n        clearInterval(this.timer);\n        this.showEndOverlay = true;\n      }\n    },\n    async startQuiz() {\n      this.showStartOverlay = false;\n      this.startTimer();\n      await recordAttempt(this.attemptFileName);\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.elapsedTime++;\n      }, 1000);\n    },\n    format_time(seconds) {\n      return formatTime(seconds);\n    },\n    endQuiz() {\n      clearInterval(this.timer);\n      this.showEndOverlay = false;\n      this.showStartOverlay = true;\n      this.$router.go(-1);\n    },\n    exitQuiz() {\n      clearInterval(this.timer);\n      this.$router.go(-1);\n    }\n  },\n  mounted() {\n    this.current_theme();\n  },\n  created() {\n    const id = \"html-game-lvl1\";\n    const filterData = id => {\n      return GameData.DataForLvl1.filter(data => data.id === id);\n    };\n    this.questions = shuffleArray(filterData(id));\n  },\n  beforeUnmount() {\n    if (this.timer) clearInterval(this.timer);\n  }\n};","map":{"version":3,"names":["mapGetters","shuffleArray","formatTime","GameData","savePreference","recordAttempt","data","questions","currentQuestionIndex","score","timer","elapsedTime","showStartOverlay","showEndOverlay","optionFontcolor","challenge","attemptFileName","computed","currentQuestion","methods","save_game_data","keys","payload","timeFinish","$router","go","current_theme","currentTheme","checkAnswer","selectedOption","answer","length","clearInterval","startQuiz","startTimer","setInterval","format_time","seconds","endQuiz","exitQuiz","mounted","created","id","filterData","DataForLvl1","filter","beforeUnmount"],"sources":["C:\\Users\\ruzhe\\mobile-apps-games-container\\code-master\\src\\components\\Dashboard\\GameComponents\\HtmlMission\\HtmlLvl1.vue"],"sourcesContent":["<template>\r\n    <div class=\"quiz-container\">\r\n        <!-- Start Overlay -->\r\n        <div v-if=\"showStartOverlay\" class=\"start-overlay\">\r\n            <h2>Welcome to the Quiz Challenge</h2>\r\n            <button @click=\"startQuiz\">Start Quiz</button>\r\n            <button @click=\"exitQuiz\">Exit</button>\r\n        </div>\r\n\r\n        <!-- End Overlay -->\r\n        <div v-if=\"showEndOverlay\" class=\"end-overlay\">\r\n            <h2>Congratulations! You've completed all challenges.</h2>\r\n            <p>Your score: {{ score }} / {{ questions.length }}</p>\r\n            <p>Time taken: {{ format_time(elapsedTime) }}</p>\r\n            <button @click=\"save_game_data\">End & Save</button>\r\n            <button @click=\"endQuiz\">End</button>\r\n        </div>\r\n\r\n        <!-- Quiz Content -->\r\n        <div v-else>\r\n            <div v-if=\"currentQuestionIndex < questions.length\">\r\n                <h2>\r\n                    Quiz Challenge {{ currentQuestionIndex + 1 }}/{{ questions.length }}\r\n                </h2>\r\n                <div class=\"question\">{{ currentQuestion.question }}</div>\r\n                <ul class=\"options\">\r\n                    <li v-for=\"(option, index) in currentQuestion.options\" :key=\"index\">\r\n                        <button @click=\"checkAnswer(option)\" :style=\"{ color: optionFontcolor }\">\r\n                            {{ option }}\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n                <div class=\"timer\">Time: {{ format_time(elapsedTime) }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from \"vuex\";\r\nimport { shuffleArray, formatTime } from \"../../../../utils/GameUtils\";\r\nimport GameData from \"../GameData.json\";\r\nimport { savePreference,recordAttempt } from \"@/utils/PreferencesService\";\r\nexport default {\r\n    data() {\r\n        return {\r\n            questions: [],\r\n            currentQuestionIndex: 0,\r\n            score: 0,\r\n            timer: null,\r\n            elapsedTime: 0,\r\n            showStartOverlay: true,\r\n            showEndOverlay: false,\r\n            optionFontcolor: \"\",\r\n            challenge: 'HTML-QUIZ-LVL-1',\r\n            attemptFileName: 'HTML-QUIZ-LVL-1-ATTEMPT',\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters([\"currentTheme\"]),\r\n        currentQuestion() {\r\n            return this.questions[this.currentQuestionIndex];\r\n        },\r\n    },\r\n    methods: {\r\n        async save_game_data() {\r\n            const keys = this.challenge;\r\n            const payload = {\r\n                challenge:this.challenge,\r\n                score:this.score,\r\n                timeFinish:this.elapsedTime\r\n            }\r\n            await savePreference(keys,payload)\r\n            this.$router.go(-1);\r\n        },\r\n        current_theme() {\r\n            this.optionFontcolor = this.currentTheme === \"dark\" ? \"white\" : \"black\";\r\n        },\r\n        checkAnswer(selectedOption) {\r\n            if (selectedOption === this.currentQuestion.answer) {\r\n                this.score++;\r\n            }\r\n            this.currentQuestionIndex++;\r\n            if (this.currentQuestionIndex >= this.questions.length) {\r\n                clearInterval(this.timer);\r\n                this.showEndOverlay = true;\r\n            }\r\n        },\r\n        async startQuiz() {\r\n            this.showStartOverlay = false;\r\n            this.startTimer();\r\n            await recordAttempt(this.attemptFileName);\r\n        },\r\n        startTimer() {\r\n            this.timer = setInterval(() => {\r\n                this.elapsedTime++;\r\n            }, 1000);\r\n        },\r\n        format_time(seconds) {\r\n            return formatTime(seconds);\r\n        },\r\n        endQuiz() {\r\n            clearInterval(this.timer);\r\n            this.showEndOverlay = false;\r\n            this.showStartOverlay = true;\r\n            this.$router.go(-1)\r\n        },\r\n        exitQuiz() {\r\n            clearInterval(this.timer);\r\n            this.$router.go(-1);\r\n        },\r\n    },\r\n    mounted() {\r\n        this.current_theme();\r\n    },\r\n    created() {\r\n        const id = \"html-game-lvl1\";\r\n\r\n        const filterData = (id) => {\r\n            return GameData.DataForLvl1.filter((data) => data.id === id);\r\n        };\r\n        this.questions = shuffleArray(filterData(id));\r\n    },\r\n    beforeUnmount() {\r\n        if (this.timer) clearInterval(this.timer);\r\n    },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}