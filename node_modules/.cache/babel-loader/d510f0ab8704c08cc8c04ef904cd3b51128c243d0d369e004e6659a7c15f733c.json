{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createCancelablePromise, TimeoutTimer } from '../../../../base/common/async.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { ShowLightbulbIconMode } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Progress } from '../../../../platform/progress/common/progress.js';\nimport { CodeActionKind, CodeActionTriggerSource } from '../common/types.js';\nimport { getCodeActions } from './codeAction.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nexport const SUPPORTED_CODE_ACTIONS = new RawContextKey('supportedCodeAction', '');\nexport const APPLY_FIX_ALL_COMMAND_ID = '_typescript.applyFixAllCodeAction';\nclass CodeActionOracle extends Disposable {\n  constructor(_editor, _markerService, _signalChange, _delay = 250) {\n    super();\n    this._editor = _editor;\n    this._markerService = _markerService;\n    this._signalChange = _signalChange;\n    this._delay = _delay;\n    this._autoTriggerTimer = this._register(new TimeoutTimer());\n    this._register(this._markerService.onMarkerChanged(e => this._onMarkerChanges(e)));\n    this._register(this._editor.onDidChangeCursorPosition(() => this._tryAutoTrigger()));\n  }\n  trigger(trigger) {\n    const selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n    this._signalChange(selection ? {\n      trigger,\n      selection\n    } : undefined);\n  }\n  _onMarkerChanges(resources) {\n    const model = this._editor.getModel();\n    if (model && resources.some(resource => isEqual(resource, model.uri))) {\n      this._tryAutoTrigger();\n    }\n  }\n  _tryAutoTrigger() {\n    this._autoTriggerTimer.cancelAndSet(() => {\n      this.trigger({\n        type: 2 /* CodeActionTriggerType.Auto */,\n        triggerAction: CodeActionTriggerSource.Default\n      });\n    }, this._delay);\n  }\n  _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger) {\n    if (!this._editor.hasModel()) {\n      return undefined;\n    }\n    const selection = this._editor.getSelection();\n    if (trigger.type === 1 /* CodeActionTriggerType.Invoke */) {\n      return selection;\n    }\n    const enabled = this._editor.getOption(65 /* EditorOption.lightbulb */).enabled;\n    if (enabled === ShowLightbulbIconMode.Off) {\n      return undefined;\n    } else if (enabled === ShowLightbulbIconMode.On) {\n      return selection;\n    } else if (enabled === ShowLightbulbIconMode.OnCode) {\n      const isSelectionEmpty = selection.isEmpty();\n      if (!isSelectionEmpty) {\n        return selection;\n      }\n      const model = this._editor.getModel();\n      const {\n        lineNumber,\n        column\n      } = selection.getPosition();\n      const line = model.getLineContent(lineNumber);\n      if (line.length === 0) {\n        // empty line\n        return undefined;\n      } else if (column === 1) {\n        // look only right\n        if (/\\s/.test(line[0])) {\n          return undefined;\n        }\n      } else if (column === model.getLineMaxColumn(lineNumber)) {\n        // look only left\n        if (/\\s/.test(line[line.length - 1])) {\n          return undefined;\n        }\n      } else {\n        // look left and right\n        if (/\\s/.test(line[column - 2]) && /\\s/.test(line[column - 1])) {\n          return undefined;\n        }\n      }\n    }\n    return selection;\n  }\n}\nexport var CodeActionsState;\n(function (CodeActionsState) {\n  CodeActionsState.Empty = {\n    type: 0 /* Type.Empty */\n  };\n  class Triggered {\n    constructor(trigger, position, _cancellablePromise) {\n      this.trigger = trigger;\n      this.position = position;\n      this._cancellablePromise = _cancellablePromise;\n      this.type = 1 /* Type.Triggered */;\n      this.actions = _cancellablePromise.catch(e => {\n        if (isCancellationError(e)) {\n          return emptyCodeActionSet;\n        }\n        throw e;\n      });\n    }\n    cancel() {\n      this._cancellablePromise.cancel();\n    }\n  }\n  CodeActionsState.Triggered = Triggered;\n})(CodeActionsState || (CodeActionsState = {}));\nconst emptyCodeActionSet = Object.freeze({\n  allActions: [],\n  validActions: [],\n  dispose: () => {},\n  documentation: [],\n  hasAutoFix: false,\n  hasAIFix: false,\n  allAIFixes: false\n});\nexport class CodeActionModel extends Disposable {\n  constructor(_editor, _registry, _markerService, contextKeyService, _progressService, _configurationService) {\n    super();\n    this._editor = _editor;\n    this._registry = _registry;\n    this._markerService = _markerService;\n    this._progressService = _progressService;\n    this._configurationService = _configurationService;\n    this._codeActionOracle = this._register(new MutableDisposable());\n    this._state = CodeActionsState.Empty;\n    this._onDidChangeState = this._register(new Emitter());\n    this.onDidChangeState = this._onDidChangeState.event;\n    this._disposed = false;\n    this._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n    this._register(this._editor.onDidChangeModel(() => this._update()));\n    this._register(this._editor.onDidChangeModelLanguage(() => this._update()));\n    this._register(this._registry.onDidChange(() => this._update()));\n    this._register(this._editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(65 /* EditorOption.lightbulb */)) {\n        this._update();\n      }\n    }));\n    this._update();\n  }\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n    this._disposed = true;\n    super.dispose();\n    this.setState(CodeActionsState.Empty, true);\n  }\n  _settingEnabledNearbyQuickfixes() {\n    const model = this._editor?.getModel();\n    return this._configurationService ? this._configurationService.getValue('editor.codeActionWidget.includeNearbyQuickFixes', {\n      resource: model?.uri\n    }) : false;\n  }\n  _update() {\n    if (this._disposed) {\n      return;\n    }\n    this._codeActionOracle.value = undefined;\n    this.setState(CodeActionsState.Empty);\n    const model = this._editor.getModel();\n    if (model && this._registry.has(model) && !this._editor.getOption(92 /* EditorOption.readOnly */)) {\n      const supportedActions = this._registry.all(model).flatMap(provider => provider.providedCodeActionKinds ?? []);\n      this._supportedCodeActions.set(supportedActions.join(' '));\n      this._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, trigger => {\n        if (!trigger) {\n          this.setState(CodeActionsState.Empty);\n          return;\n        }\n        const startPosition = trigger.selection.getStartPosition();\n        const actions = createCancelablePromise(async token => {\n          if (this._settingEnabledNearbyQuickfixes() && trigger.trigger.type === 1 /* CodeActionTriggerType.Invoke */ && (trigger.trigger.triggerAction === CodeActionTriggerSource.QuickFix || trigger.trigger.filter?.include?.contains(CodeActionKind.QuickFix))) {\n            const codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n            const allCodeActions = [...codeActionSet.allActions];\n            if (token.isCancellationRequested) {\n              return emptyCodeActionSet;\n            }\n            // Search for quickfixes in the curret code action set.\n            const foundQuickfix = codeActionSet.validActions?.some(action => action.action.kind ? CodeActionKind.QuickFix.contains(new HierarchicalKind(action.action.kind)) : false);\n            const allMarkers = this._markerService.read({\n              resource: model.uri\n            });\n            if (foundQuickfix) {\n              for (const action of codeActionSet.validActions) {\n                if (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n                  action.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n                }\n              }\n              return {\n                validActions: codeActionSet.validActions,\n                allActions: allCodeActions,\n                documentation: codeActionSet.documentation,\n                hasAutoFix: codeActionSet.hasAutoFix,\n                hasAIFix: codeActionSet.hasAIFix,\n                allAIFixes: codeActionSet.allAIFixes,\n                dispose: () => {\n                  codeActionSet.dispose();\n                }\n              };\n            } else if (!foundQuickfix) {\n              // If markers exists, and there are no quickfixes found or length is zero, check for quickfixes on that line.\n              if (allMarkers.length > 0) {\n                const currPosition = trigger.selection.getPosition();\n                let trackedPosition = currPosition;\n                let distance = Number.MAX_VALUE;\n                const currentActions = [...codeActionSet.validActions];\n                for (const marker of allMarkers) {\n                  const col = marker.endColumn;\n                  const row = marker.endLineNumber;\n                  const startRow = marker.startLineNumber;\n                  // Found quickfix on the same line and check relative distance to other markers\n                  if (row === currPosition.lineNumber || startRow === currPosition.lineNumber) {\n                    trackedPosition = new Position(row, col);\n                    const newCodeActionTrigger = {\n                      type: trigger.trigger.type,\n                      triggerAction: trigger.trigger.triggerAction,\n                      filter: {\n                        include: trigger.trigger.filter?.include ? trigger.trigger.filter?.include : CodeActionKind.QuickFix\n                      },\n                      autoApply: trigger.trigger.autoApply,\n                      context: {\n                        notAvailableMessage: trigger.trigger.context?.notAvailableMessage || '',\n                        position: trackedPosition\n                      }\n                    };\n                    const selectionAsPosition = new Selection(trackedPosition.lineNumber, trackedPosition.column, trackedPosition.lineNumber, trackedPosition.column);\n                    const actionsAtMarker = await getCodeActions(this._registry, model, selectionAsPosition, newCodeActionTrigger, Progress.None, token);\n                    if (actionsAtMarker.validActions.length !== 0) {\n                      for (const action of actionsAtMarker.validActions) {\n                        if (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n                          action.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n                        }\n                      }\n                      if (codeActionSet.allActions.length === 0) {\n                        allCodeActions.push(...actionsAtMarker.allActions);\n                      }\n                      // Already filtered through to only get quickfixes, so no need to filter again.\n                      if (Math.abs(currPosition.column - col) < distance) {\n                        currentActions.unshift(...actionsAtMarker.validActions);\n                      } else {\n                        currentActions.push(...actionsAtMarker.validActions);\n                      }\n                    }\n                    distance = Math.abs(currPosition.column - col);\n                  }\n                }\n                const filteredActions = currentActions.filter((action, index, self) => self.findIndex(a => a.action.title === action.action.title) === index);\n                filteredActions.sort((a, b) => {\n                  if (a.action.isPreferred && !b.action.isPreferred) {\n                    return -1;\n                  } else if (!a.action.isPreferred && b.action.isPreferred) {\n                    return 1;\n                  } else if (a.action.isAI && !b.action.isAI) {\n                    return 1;\n                  } else if (!a.action.isAI && b.action.isAI) {\n                    return -1;\n                  } else {\n                    return 0;\n                  }\n                });\n                // Only retriggers if actually found quickfix on the same line as cursor\n                return {\n                  validActions: filteredActions,\n                  allActions: allCodeActions,\n                  documentation: codeActionSet.documentation,\n                  hasAutoFix: codeActionSet.hasAutoFix,\n                  hasAIFix: codeActionSet.hasAIFix,\n                  allAIFixes: codeActionSet.allAIFixes,\n                  dispose: () => {\n                    codeActionSet.dispose();\n                  }\n                };\n              }\n            }\n          }\n          // temporarilly hiding here as this is enabled/disabled behind a setting.\n          return getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n        });\n        if (trigger.trigger.type === 1 /* CodeActionTriggerType.Invoke */) {\n          this._progressService?.showWhile(actions, 250);\n        }\n        const newState = new CodeActionsState.Triggered(trigger.trigger, startPosition, actions);\n        let isManualToAutoTransition = false;\n        if (this._state.type === 1 /* CodeActionsState.Type.Triggered */) {\n          // Check if the current state is manual and the new state is automatic\n          isManualToAutoTransition = this._state.trigger.type === 1 /* CodeActionTriggerType.Invoke */ && newState.type === 1 /* CodeActionsState.Type.Triggered */ && newState.trigger.type === 2 /* CodeActionTriggerType.Auto */ && this._state.position !== newState.position;\n        }\n        // Do not trigger state if current state is manual and incoming state is automatic\n        if (!isManualToAutoTransition) {\n          this.setState(newState);\n        } else {\n          // Reset the new state after getting code actions back.\n          setTimeout(() => {\n            this.setState(newState);\n          }, 500);\n        }\n      }, undefined);\n      this._codeActionOracle.value.trigger({\n        type: 2 /* CodeActionTriggerType.Auto */,\n        triggerAction: CodeActionTriggerSource.Default\n      });\n    } else {\n      this._supportedCodeActions.reset();\n    }\n  }\n  trigger(trigger) {\n    this._codeActionOracle.value?.trigger(trigger);\n  }\n  setState(newState, skipNotify) {\n    if (newState === this._state) {\n      return;\n    }\n    // Cancel old request\n    if (this._state.type === 1 /* CodeActionsState.Type.Triggered */) {\n      this._state.cancel();\n    }\n    this._state = newState;\n    if (!skipNotify && !this._disposed) {\n      this._onDidChangeState.fire(newState);\n    }\n  }\n}","map":{"version":3,"names":["createCancelablePromise","TimeoutTimer","isCancellationError","Emitter","Disposable","MutableDisposable","isEqual","ShowLightbulbIconMode","Position","Selection","RawContextKey","Progress","CodeActionKind","CodeActionTriggerSource","getCodeActions","HierarchicalKind","SUPPORTED_CODE_ACTIONS","APPLY_FIX_ALL_COMMAND_ID","CodeActionOracle","constructor","_editor","_markerService","_signalChange","_delay","_autoTriggerTimer","_register","onMarkerChanged","e","_onMarkerChanges","onDidChangeCursorPosition","_tryAutoTrigger","trigger","selection","_getRangeOfSelectionUnlessWhitespaceEnclosed","undefined","resources","model","getModel","some","resource","uri","cancelAndSet","type","triggerAction","Default","hasModel","getSelection","enabled","getOption","Off","On","OnCode","isSelectionEmpty","isEmpty","lineNumber","column","getPosition","line","getLineContent","length","test","getLineMaxColumn","CodeActionsState","Empty","Triggered","position","_cancellablePromise","actions","catch","emptyCodeActionSet","cancel","Object","freeze","allActions","validActions","dispose","documentation","hasAutoFix","hasAIFix","allAIFixes","CodeActionModel","_registry","contextKeyService","_progressService","_configurationService","_codeActionOracle","_state","_onDidChangeState","onDidChangeState","event","_disposed","_supportedCodeActions","bindTo","onDidChangeModel","_update","onDidChangeModelLanguage","onDidChange","onDidChangeConfiguration","hasChanged","setState","_settingEnabledNearbyQuickfixes","getValue","value","has","supportedActions","all","flatMap","provider","providedCodeActionKinds","set","join","startPosition","getStartPosition","token","QuickFix","filter","include","contains","codeActionSet","None","allCodeActions","isCancellationRequested","foundQuickfix","action","kind","allMarkers","read","command","arguments","arg","includes","diagnostics","marker","relatedInformation","currPosition","trackedPosition","distance","Number","MAX_VALUE","currentActions","col","endColumn","row","endLineNumber","startRow","startLineNumber","newCodeActionTrigger","autoApply","context","notAvailableMessage","selectionAsPosition","actionsAtMarker","push","Math","abs","unshift","filteredActions","index","self","findIndex","a","title","sort","b","isPreferred","isAI","showWhile","newState","isManualToAutoTransition","setTimeout","reset","skipNotify","fire"],"sources":["C:/Users/ruzhe/CODEHUB-PH/GAMES/code-master/node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/browser/codeActionModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createCancelablePromise, TimeoutTimer } from '../../../../base/common/async.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { ShowLightbulbIconMode } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Progress } from '../../../../platform/progress/common/progress.js';\nimport { CodeActionKind, CodeActionTriggerSource } from '../common/types.js';\nimport { getCodeActions } from './codeAction.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nexport const SUPPORTED_CODE_ACTIONS = new RawContextKey('supportedCodeAction', '');\nexport const APPLY_FIX_ALL_COMMAND_ID = '_typescript.applyFixAllCodeAction';\nclass CodeActionOracle extends Disposable {\n    constructor(_editor, _markerService, _signalChange, _delay = 250) {\n        super();\n        this._editor = _editor;\n        this._markerService = _markerService;\n        this._signalChange = _signalChange;\n        this._delay = _delay;\n        this._autoTriggerTimer = this._register(new TimeoutTimer());\n        this._register(this._markerService.onMarkerChanged(e => this._onMarkerChanges(e)));\n        this._register(this._editor.onDidChangeCursorPosition(() => this._tryAutoTrigger()));\n    }\n    trigger(trigger) {\n        const selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n        this._signalChange(selection ? { trigger, selection } : undefined);\n    }\n    _onMarkerChanges(resources) {\n        const model = this._editor.getModel();\n        if (model && resources.some(resource => isEqual(resource, model.uri))) {\n            this._tryAutoTrigger();\n        }\n    }\n    _tryAutoTrigger() {\n        this._autoTriggerTimer.cancelAndSet(() => {\n            this.trigger({ type: 2 /* CodeActionTriggerType.Auto */, triggerAction: CodeActionTriggerSource.Default });\n        }, this._delay);\n    }\n    _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger) {\n        if (!this._editor.hasModel()) {\n            return undefined;\n        }\n        const selection = this._editor.getSelection();\n        if (trigger.type === 1 /* CodeActionTriggerType.Invoke */) {\n            return selection;\n        }\n        const enabled = this._editor.getOption(65 /* EditorOption.lightbulb */).enabled;\n        if (enabled === ShowLightbulbIconMode.Off) {\n            return undefined;\n        }\n        else if (enabled === ShowLightbulbIconMode.On) {\n            return selection;\n        }\n        else if (enabled === ShowLightbulbIconMode.OnCode) {\n            const isSelectionEmpty = selection.isEmpty();\n            if (!isSelectionEmpty) {\n                return selection;\n            }\n            const model = this._editor.getModel();\n            const { lineNumber, column } = selection.getPosition();\n            const line = model.getLineContent(lineNumber);\n            if (line.length === 0) {\n                // empty line\n                return undefined;\n            }\n            else if (column === 1) {\n                // look only right\n                if (/\\s/.test(line[0])) {\n                    return undefined;\n                }\n            }\n            else if (column === model.getLineMaxColumn(lineNumber)) {\n                // look only left\n                if (/\\s/.test(line[line.length - 1])) {\n                    return undefined;\n                }\n            }\n            else {\n                // look left and right\n                if (/\\s/.test(line[column - 2]) && /\\s/.test(line[column - 1])) {\n                    return undefined;\n                }\n            }\n        }\n        return selection;\n    }\n}\nexport var CodeActionsState;\n(function (CodeActionsState) {\n    CodeActionsState.Empty = { type: 0 /* Type.Empty */ };\n    class Triggered {\n        constructor(trigger, position, _cancellablePromise) {\n            this.trigger = trigger;\n            this.position = position;\n            this._cancellablePromise = _cancellablePromise;\n            this.type = 1 /* Type.Triggered */;\n            this.actions = _cancellablePromise.catch((e) => {\n                if (isCancellationError(e)) {\n                    return emptyCodeActionSet;\n                }\n                throw e;\n            });\n        }\n        cancel() {\n            this._cancellablePromise.cancel();\n        }\n    }\n    CodeActionsState.Triggered = Triggered;\n})(CodeActionsState || (CodeActionsState = {}));\nconst emptyCodeActionSet = Object.freeze({\n    allActions: [],\n    validActions: [],\n    dispose: () => { },\n    documentation: [],\n    hasAutoFix: false,\n    hasAIFix: false,\n    allAIFixes: false,\n});\nexport class CodeActionModel extends Disposable {\n    constructor(_editor, _registry, _markerService, contextKeyService, _progressService, _configurationService) {\n        super();\n        this._editor = _editor;\n        this._registry = _registry;\n        this._markerService = _markerService;\n        this._progressService = _progressService;\n        this._configurationService = _configurationService;\n        this._codeActionOracle = this._register(new MutableDisposable());\n        this._state = CodeActionsState.Empty;\n        this._onDidChangeState = this._register(new Emitter());\n        this.onDidChangeState = this._onDidChangeState.event;\n        this._disposed = false;\n        this._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n        this._register(this._editor.onDidChangeModel(() => this._update()));\n        this._register(this._editor.onDidChangeModelLanguage(() => this._update()));\n        this._register(this._registry.onDidChange(() => this._update()));\n        this._register(this._editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(65 /* EditorOption.lightbulb */)) {\n                this._update();\n            }\n        }));\n        this._update();\n    }\n    dispose() {\n        if (this._disposed) {\n            return;\n        }\n        this._disposed = true;\n        super.dispose();\n        this.setState(CodeActionsState.Empty, true);\n    }\n    _settingEnabledNearbyQuickfixes() {\n        const model = this._editor?.getModel();\n        return this._configurationService ? this._configurationService.getValue('editor.codeActionWidget.includeNearbyQuickFixes', { resource: model?.uri }) : false;\n    }\n    _update() {\n        if (this._disposed) {\n            return;\n        }\n        this._codeActionOracle.value = undefined;\n        this.setState(CodeActionsState.Empty);\n        const model = this._editor.getModel();\n        if (model\n            && this._registry.has(model)\n            && !this._editor.getOption(92 /* EditorOption.readOnly */)) {\n            const supportedActions = this._registry.all(model).flatMap(provider => provider.providedCodeActionKinds ?? []);\n            this._supportedCodeActions.set(supportedActions.join(' '));\n            this._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, trigger => {\n                if (!trigger) {\n                    this.setState(CodeActionsState.Empty);\n                    return;\n                }\n                const startPosition = trigger.selection.getStartPosition();\n                const actions = createCancelablePromise(async (token) => {\n                    if (this._settingEnabledNearbyQuickfixes() && trigger.trigger.type === 1 /* CodeActionTriggerType.Invoke */ && (trigger.trigger.triggerAction === CodeActionTriggerSource.QuickFix || trigger.trigger.filter?.include?.contains(CodeActionKind.QuickFix))) {\n                        const codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n                        const allCodeActions = [...codeActionSet.allActions];\n                        if (token.isCancellationRequested) {\n                            return emptyCodeActionSet;\n                        }\n                        // Search for quickfixes in the curret code action set.\n                        const foundQuickfix = codeActionSet.validActions?.some(action => action.action.kind ? CodeActionKind.QuickFix.contains(new HierarchicalKind(action.action.kind)) : false);\n                        const allMarkers = this._markerService.read({ resource: model.uri });\n                        if (foundQuickfix) {\n                            for (const action of codeActionSet.validActions) {\n                                if (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n                                    action.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n                                }\n                            }\n                            return { validActions: codeActionSet.validActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { codeActionSet.dispose(); } };\n                        }\n                        else if (!foundQuickfix) {\n                            // If markers exists, and there are no quickfixes found or length is zero, check for quickfixes on that line.\n                            if (allMarkers.length > 0) {\n                                const currPosition = trigger.selection.getPosition();\n                                let trackedPosition = currPosition;\n                                let distance = Number.MAX_VALUE;\n                                const currentActions = [...codeActionSet.validActions];\n                                for (const marker of allMarkers) {\n                                    const col = marker.endColumn;\n                                    const row = marker.endLineNumber;\n                                    const startRow = marker.startLineNumber;\n                                    // Found quickfix on the same line and check relative distance to other markers\n                                    if ((row === currPosition.lineNumber || startRow === currPosition.lineNumber)) {\n                                        trackedPosition = new Position(row, col);\n                                        const newCodeActionTrigger = {\n                                            type: trigger.trigger.type,\n                                            triggerAction: trigger.trigger.triggerAction,\n                                            filter: { include: trigger.trigger.filter?.include ? trigger.trigger.filter?.include : CodeActionKind.QuickFix },\n                                            autoApply: trigger.trigger.autoApply,\n                                            context: { notAvailableMessage: trigger.trigger.context?.notAvailableMessage || '', position: trackedPosition }\n                                        };\n                                        const selectionAsPosition = new Selection(trackedPosition.lineNumber, trackedPosition.column, trackedPosition.lineNumber, trackedPosition.column);\n                                        const actionsAtMarker = await getCodeActions(this._registry, model, selectionAsPosition, newCodeActionTrigger, Progress.None, token);\n                                        if (actionsAtMarker.validActions.length !== 0) {\n                                            for (const action of actionsAtMarker.validActions) {\n                                                if (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n                                                    action.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n                                                }\n                                            }\n                                            if (codeActionSet.allActions.length === 0) {\n                                                allCodeActions.push(...actionsAtMarker.allActions);\n                                            }\n                                            // Already filtered through to only get quickfixes, so no need to filter again.\n                                            if (Math.abs(currPosition.column - col) < distance) {\n                                                currentActions.unshift(...actionsAtMarker.validActions);\n                                            }\n                                            else {\n                                                currentActions.push(...actionsAtMarker.validActions);\n                                            }\n                                        }\n                                        distance = Math.abs(currPosition.column - col);\n                                    }\n                                }\n                                const filteredActions = currentActions.filter((action, index, self) => self.findIndex((a) => a.action.title === action.action.title) === index);\n                                filteredActions.sort((a, b) => {\n                                    if (a.action.isPreferred && !b.action.isPreferred) {\n                                        return -1;\n                                    }\n                                    else if (!a.action.isPreferred && b.action.isPreferred) {\n                                        return 1;\n                                    }\n                                    else if (a.action.isAI && !b.action.isAI) {\n                                        return 1;\n                                    }\n                                    else if (!a.action.isAI && b.action.isAI) {\n                                        return -1;\n                                    }\n                                    else {\n                                        return 0;\n                                    }\n                                });\n                                // Only retriggers if actually found quickfix on the same line as cursor\n                                return { validActions: filteredActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { codeActionSet.dispose(); } };\n                            }\n                        }\n                    }\n                    // temporarilly hiding here as this is enabled/disabled behind a setting.\n                    return getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n                });\n                if (trigger.trigger.type === 1 /* CodeActionTriggerType.Invoke */) {\n                    this._progressService?.showWhile(actions, 250);\n                }\n                const newState = new CodeActionsState.Triggered(trigger.trigger, startPosition, actions);\n                let isManualToAutoTransition = false;\n                if (this._state.type === 1 /* CodeActionsState.Type.Triggered */) {\n                    // Check if the current state is manual and the new state is automatic\n                    isManualToAutoTransition = this._state.trigger.type === 1 /* CodeActionTriggerType.Invoke */ &&\n                        newState.type === 1 /* CodeActionsState.Type.Triggered */ &&\n                        newState.trigger.type === 2 /* CodeActionTriggerType.Auto */ &&\n                        this._state.position !== newState.position;\n                }\n                // Do not trigger state if current state is manual and incoming state is automatic\n                if (!isManualToAutoTransition) {\n                    this.setState(newState);\n                }\n                else {\n                    // Reset the new state after getting code actions back.\n                    setTimeout(() => {\n                        this.setState(newState);\n                    }, 500);\n                }\n            }, undefined);\n            this._codeActionOracle.value.trigger({ type: 2 /* CodeActionTriggerType.Auto */, triggerAction: CodeActionTriggerSource.Default });\n        }\n        else {\n            this._supportedCodeActions.reset();\n        }\n    }\n    trigger(trigger) {\n        this._codeActionOracle.value?.trigger(trigger);\n    }\n    setState(newState, skipNotify) {\n        if (newState === this._state) {\n            return;\n        }\n        // Cancel old request\n        if (this._state.type === 1 /* CodeActionsState.Type.Triggered */) {\n            this._state.cancel();\n        }\n        this._state = newState;\n        if (!skipNotify && !this._disposed) {\n            this._onDidChangeState.fire(newState);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}