{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"quiz-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"start-overlay\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"end-overlay\"\n};\nconst _hoisted_4 = {\n  key: 2\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  class: \"question\"\n};\nconst _hoisted_7 = {\n  class: \"options\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"timer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.showStartOverlay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Welcome to the Quiz Challenge\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.startQuiz && $options.startQuiz(...args))\n  }, \"Start Quiz\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.endQuiz && $options.endQuiz(...args))\n  }, \"Exit\")])) : _createCommentVNode(\"v-if\", true), $data.showEndOverlay ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Congratulations! You've completed all challenges.\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, \"Your score: \" + _toDisplayString($data.score) + \" / \" + _toDisplayString($data.questions.length), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Time taken: \" + _toDisplayString($options.format_time($data.elapsedTime)), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.save_game_data && $options.save_game_data(...args))\n  }, \"End & Save\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.endQuiz && $options.endQuiz(...args))\n  }, \"End\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [$data.currentQuestionIndex < $data.questions.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"h2\", null, \"Quiz Challenge \" + _toDisplayString($data.currentQuestionIndex + 1) + \"/ 25\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_6, _toDisplayString($options.currentQuestion.question), 1 /* TEXT */), _createElementVNode(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.currentQuestion.options, (option, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createElementVNode(\"button\", {\n      onClick: $event => $options.checkAnswer(option),\n      style: _normalizeStyle({\n        color: $data.optionFontcolor\n      })\n    }, _toDisplayString(option), 13 /* TEXT, STYLE, PROPS */, _hoisted_8)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_9, \"Time: \" + _toDisplayString($options.format_time($data.elapsedTime)), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$data","showStartOverlay","_hoisted_2","_createElementVNode","onClick","_cache","args","$options","startQuiz","endQuiz","_createCommentVNode","showEndOverlay","_hoisted_3","_toDisplayString","score","questions","length","format_time","elapsedTime","save_game_data","_hoisted_4","currentQuestionIndex","_hoisted_5","_hoisted_6","currentQuestion","question","_hoisted_7","_Fragment","_renderList","options","option","index","$event","checkAnswer","style","_normalizeStyle","color","optionFontcolor","_hoisted_8","_hoisted_9"],"sources":["C:\\Users\\ruzhe\\CODEHUB-PH\\GAMES\\code-master\\src\\components\\Dashboard\\GameComponents\\CssMission\\CssLvl1.vue"],"sourcesContent":["<template>\r\n    <div class=\"quiz-container\">\r\n        <div v-if=\"showStartOverlay\" class=\"start-overlay\">\r\n            <h2>Welcome to the Quiz Challenge</h2>\r\n            <button @click=\"startQuiz\">Start Quiz</button>\r\n            <button @click=\"endQuiz\">Exit</button>\r\n            \r\n        </div>\r\n        <div v-if=\"showEndOverlay\" class=\"end-overlay\">\r\n            <h2>Congratulations! You've completed all challenges.</h2>\r\n            <p>Your score: {{ score }} / {{ questions.length }}</p>\r\n            <p>Time taken: {{ format_time(elapsedTime) }}</p>\r\n            <button @click=\"save_game_data\">End & Save</button>\r\n            <button @click=\"endQuiz\">End</button>\r\n        </div>\r\n        <div v-else>\r\n            <div v-if=\"currentQuestionIndex < questions.length\">\r\n                <h2>Quiz Challenge {{ currentQuestionIndex + 1 }}/ 25</h2>\r\n                <div class=\"question\">{{ currentQuestion.question }}</div>\r\n                <ul class=\"options\">\r\n                    <li v-for=\"(option, index) in currentQuestion.options\" :key=\"index\">\r\n                        <button @click=\"checkAnswer(option)\" :style=\"{ color: optionFontcolor }\">{{ option }}</button>\r\n                    </li>\r\n                </ul>\r\n                <div class=\"timer\">Time: {{ format_time(elapsedTime) }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex';\r\nimport { shuffleArray, formatTime } from '../../../../utils/GameUtils';\r\nimport GameData from '../GameData.json';\r\nimport { savePreference,recordAttempt } from '@/utils/PreferencesService';\r\nexport default {\r\n    data() {\r\n        return {\r\n            questions: [],\r\n            currentQuestionIndex: 0,\r\n            score: 0,\r\n            timer: null,\r\n            elapsedTime: 0,\r\n            showStartOverlay: true,\r\n            showEndOverlay: false,\r\n            optionFontcolor: '',\r\n            challenge: 'CSS-QUIZ-LVL-1',\r\n            attemptFileName: 'CSS-QUIZ-LVL-1-ATTEMPT',\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters(['currentTheme']),\r\n        currentQuestion() {\r\n            return this.questions[this.currentQuestionIndex];\r\n        }\r\n    },\r\n    methods: {\r\n        async save_game_data(){\r\n            const keys = this.challenge;\r\n            const payload = {\r\n                challenge:this.challenge,\r\n                score:this.score,\r\n                timeFinish:this.elapsedTime\r\n            };\r\n            await savePreference(keys,payload)\r\n            this.$router.go(-1);\r\n        },\r\n        current_theme() {\r\n            this.optionFontcolor = this.currentTheme === 'dark' ? 'white' : 'black';\r\n        },\r\n        checkAnswer(selectedOption) {\r\n            if (selectedOption === this.currentQuestion.answer) {\r\n                this.score++;\r\n            }\r\n            this.currentQuestionIndex++;\r\n            if (this.currentQuestionIndex >= this.questions.length) {\r\n                clearInterval(this.timer);\r\n                this.showEndOverlay = true;\r\n            }\r\n        },\r\n        async startQuiz() {\r\n            this.showStartOverlay = false;\r\n            this.startTimer();\r\n            await recordAttempt(this.attemptFileName);\r\n        },\r\n        startTimer() {\r\n            this.timer = setInterval(() => {\r\n                this.elapsedTime++;\r\n            }, 1000);\r\n        },\r\n        format_time(seconds) {\r\n            return formatTime(seconds)\r\n        },\r\n        endQuiz() {\r\n            this.showEndOverlay = false;\r\n            this.showStartOverlay = true;\r\n            this.$router.go(-1)\r\n        }\r\n    },\r\n    mounted() {\r\n        this.current_theme()\r\n    },\r\n    created() {\r\n        const id = \"css-game-lvl1\";\r\n\r\n        const filterData = (id) => {\r\n            return GameData.DataForLvl1.filter((data) => data.id === id);\r\n        };\r\n        this.questions = shuffleArray(filterData(id));\r\n    },\r\n    beforeUnmount() {\r\n        if (this.timer) clearInterval(this.timer);\r\n    }\r\n};\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAgB;;EAD/BC,GAAA;EAEqCD,KAAK,EAAC;;;EAF3CC,GAAA;EAQmCD,KAAK,EAAC;;;EARzCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAkBqBD,KAAK,EAAC;AAAU;;EACjBA,KAAK,EAAC;AAAS;mBAnBnC;;EAwBqBA,KAAK,EAAC;AAAO;;uBAvB9BE,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBSC,KAAA,CAAAC,gBAAgB,I,cAA3BH,mBAAA,CAKM,OALNI,UAKM,G,0BAJFC,mBAAA,CAAsC,YAAlC,+BAA6B,sBACjCA,mBAAA,CAA8C;IAArCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;KAAE,YAAU,GACrCH,mBAAA,CAAsC;IAA7BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,OAAA,IAAAF,QAAA,CAAAE,OAAA,IAAAH,IAAA,CAAO;KAAE,MAAI,E,KALzCI,mBAAA,gBAQmBV,KAAA,CAAAW,cAAc,I,cAAzBb,mBAAA,CAMM,OANNc,UAMM,G,0BALFT,mBAAA,CAA0D,YAAtD,mDAAiD,sBACrDA,mBAAA,CAAuD,WAApD,cAAY,GAAAU,gBAAA,CAAGb,KAAA,CAAAc,KAAK,IAAG,KAAG,GAAAD,gBAAA,CAAGb,KAAA,CAAAe,SAAS,CAACC,MAAM,kBAChDb,mBAAA,CAAiD,WAA9C,cAAY,GAAAU,gBAAA,CAAGN,QAAA,CAAAU,WAAW,CAACjB,KAAA,CAAAkB,WAAW,mBACzCf,mBAAA,CAAmD;IAA1CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAY,cAAA,IAAAZ,QAAA,CAAAY,cAAA,IAAAb,IAAA,CAAc;KAAE,YAAU,GAC1CH,mBAAA,CAAqC;IAA5BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,OAAA,IAAAF,QAAA,CAAAE,OAAA,IAAAH,IAAA,CAAO;KAAE,KAAG,E,oBAEhCR,mBAAA,CAWM,OA1BdsB,UAAA,GAgBuBpB,KAAA,CAAAqB,oBAAoB,GAAGrB,KAAA,CAAAe,SAAS,CAACC,MAAM,I,cAAlDlB,mBAAA,CASM,OAzBlBwB,UAAA,GAiBgBnB,mBAAA,CAA0D,YAAtD,iBAAe,GAAAU,gBAAA,CAAGb,KAAA,CAAAqB,oBAAoB,QAAO,MAAI,iBACrDlB,mBAAA,CAA0D,OAA1DoB,UAA0D,EAAAV,gBAAA,CAAjCN,QAAA,CAAAiB,eAAe,CAACC,QAAQ,kBACjDtB,mBAAA,CAIK,MAJLuB,UAIK,I,kBAHD5B,mBAAA,CAEK6B,SAAA,QAtBzBC,WAAA,CAoBkDrB,QAAA,CAAAiB,eAAe,CAACK,OAAO,EApBzE,CAoBgCC,MAAM,EAAEC,KAAK;yBAAzBjC,mBAAA,CAEK;MAFmDD,GAAG,EAAEkC;IAAK,IAC9D5B,mBAAA,CAA8F;MAArFC,OAAK,EAAA4B,MAAA,IAAEzB,QAAA,CAAA0B,WAAW,CAACH,MAAM;MAAII,KAAK,EArBnEC,eAAA;QAAAC,KAAA,EAqB8EpC,KAAA,CAAAqC;MAAe;wBAAOP,MAAM,gCArB1GQ,UAAA,E;oCAwBgBnC,mBAAA,CAA6D,OAA7DoC,UAA6D,EAA1C,QAAM,GAAA1B,gBAAA,CAAGN,QAAA,CAAAU,WAAW,CAACjB,KAAA,CAAAkB,WAAW,kB,KAxBnER,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}